# app/handlers/employer_responses_handlers.py
import traceback
import re # –î–ª—è regexp, –µ—Å–ª–∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
from datetime import datetime, timezone
from aiogram import Bot, Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton

from app.db.database import AsyncSessionFactory
from app.db.models import User, ApplicantProfile, EmployerProfile, ApplicantEmployerInteraction, InteractionTypeEnum, GenderEnum
from sqlalchemy import select, update, func as sqlalchemy_func, delete
from app.db.models import Complaint, ComplaintStatusEnum

from app.handlers.registration_handlers import is_user_subscribed_to_channel
from app.keyboards.reply_keyboards import start_keyboard


from app.handlers.settings_handlers import BTN_VIEW_RESPONSES_TEXT, show_employer_main_menu 

employer_responses_router = Router()

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø CALLBACK DATA ---
VIEW_SPECIFIC_RESPONSE_PREFIX = "view_specific_resp:" 
NEXT_RESPONSE_CALLBACK_DATA = "next_unread_resp"
REPORT_APPLICANT_CALLBACK_DATA_PREFIX = "report_appl:"


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def format_applicant_profile_for_employer(
    applicant_profile: ApplicantProfile, 
    applicant_user: User, 
    interaction: ApplicantEmployerInteraction
) -> str:
    gender_display = getattr(applicant_profile.gender, 'name', "–ù–µ —É–∫–∞–∑–∞–Ω").title()
    contact_phone_display = f"+{applicant_user.contact_phone}" if applicant_user.contact_phone else "–ù–µ —É–∫–∞–∑–∞–Ω"
    username_display = f"@{applicant_user.username}" if applicant_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"

    text = (
        f"üë§ –ê–Ω–∫–µ—Ç–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è (–û—Ç–∫–ª–∏–∫ ID: {interaction.id}):\n\n"
        f"<b>–ò–º—è:</b> {applicant_user.first_name or ''} {applicant_user.last_name or ''}\n"
        f"<b>Username:</b> {username_display}\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> {applicant_profile.city}\n"
        f"<b>–ü–æ–ª:</b> {gender_display}\n<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {applicant_profile.age}\n"
        f"<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>\n{applicant_profile.experience}\n\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç Telegram:</b> {username_display}\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {contact_phone_display}\n"
    )
    if interaction.interaction_type == InteractionTypeEnum.QUESTION_SENT and interaction.question_text:
        text += f"\n<b>‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è:</b>\n{interaction.question_text}"
    elif interaction.interaction_type == InteractionTypeEnum.LIKE:
        text += f"\nüëç –°–æ–∏—Å–∫–∞—Ç–µ–ª—å –ª–∞–π–∫–Ω—É–ª –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é."
    return text

async def build_response_inline_keyboard(remaining_count: int, applicant_user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∫–µ—Ç–æ–π —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è."""
    buttons = [[InlineKeyboardButton(text="üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"{REPORT_APPLICANT_CALLBACK_DATA_PREFIX}{applicant_user_id}")]]
    if remaining_count > 0:
        buttons.append([InlineKeyboardButton(text=f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π ({remaining_count})", callback_data=NEXT_RESPONSE_CALLBACK_DATA)])
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–∞, —Ç.–∫. Reply-–º–µ–Ω—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def send_or_edit_response_message(
    bot_instance: Bot,
    chat_id: int,
    text: str,
    reply_markup: InlineKeyboardMarkup,
    message_to_edit: types.Message = None
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∫–ª–∏–∫–æ–º."""
    if message_to_edit:
        try:

            if isinstance(message_to_edit.reply_markup, InlineKeyboardMarkup):
                 await message_to_edit.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Inline-–∫–Ω–æ–ø–∫–æ–π "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π –∏ –Ω–æ–≤—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏
            await bot_instance.send_message(chat_id, text, parse_mode="HTML", reply_markup=reply_markup)
            return
        except Exception as e:
            print(f"Failed to delete/edit previous message, sending new: {e}")
            # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await bot_instance.send_message(chat_id, text, parse_mode="HTML", reply_markup=reply_markup)


async def display_applicant_response(
    interaction_to_show: ApplicantEmployerInteraction, # –û–±—ä–µ–∫—Ç –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    employer_user_id: int, 
    bot_instance: Bot, 
    chat_id_to_reply: int, 
    state: FSMContext,
    original_message_with_button: types.Message = None 
):

    async with AsyncSessionFactory() as session, session.begin():
        # –ü–æ–ª—É—á–∞–µ–º interaction, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        current_interaction_in_session = await session.get(ApplicantEmployerInteraction, interaction_to_show.id)
        if not current_interaction_in_session:
            await bot_instance.send_message(chat_id_to_reply, "–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
            if original_message_with_button: # –ï—Å–ª–∏ –±—ã–ª–æ PUSH-—Å–æ–æ–±—â–µ–Ω–∏–µ, –µ–≥–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
                try: await original_message_with_button.delete()
                except: pass
            return 

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
        applicant_user = await session.get(User, current_interaction_in_session.applicant_user_id)
        applicant_profile_q = await session.execute(
            select(ApplicantProfile).where(ApplicantProfile.user_id == current_interaction_in_session.applicant_user_id)
        )
        applicant_profile = applicant_profile_q.scalar_one_or_none()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã
        if not (applicant_user and applicant_profile):
            await bot_instance.send_message(chat_id_to_reply, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π.")
            # –î–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –Ω–µ –ø–æ–ª–Ω—ã–µ, –æ—Ç–∫–ª–∏–∫ –º—ã —É–≤–∏–¥–µ–ª–∏
            if not current_interaction_in_session.is_viewed_by_employer:
                current_interaction_in_session.is_viewed_by_employer = True
                current_interaction_in_session.updated_at = datetime.now(timezone.utc)
            return 

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
        profile_text = format_applicant_profile_for_employer(applicant_profile, applicant_user, current_interaction_in_session)
        
        # –ü–æ–º–µ—á–∞–µ–º –æ—Ç–∫–ª–∏–∫ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π
        if not current_interaction_in_session.is_viewed_by_employer:
            current_interaction_in_session.is_viewed_by_employer = True
            current_interaction_in_session.updated_at = datetime.now(timezone.utc)
            print(f"DEBUG: Interaction ID {current_interaction_in_session.id} marked as viewed by employer {employer_user_id}.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è (–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–∫–ª–∏–∫–∞—Ö –≤ FSM
        # –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
        remaining_responses_count_q = await session.execute(
            select(sqlalchemy_func.count(ApplicantEmployerInteraction.id)).where(
                ApplicantEmployerInteraction.employer_profile_id == current_interaction_in_session.employer_profile_id,
                ApplicantEmployerInteraction.is_viewed_by_employer == False, # –°—á–∏—Ç–∞–µ–º —Ç–µ, —á—Ç–æ –µ—â–µ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã
                ApplicantEmployerInteraction.interaction_type.in_([InteractionTypeEnum.LIKE, InteractionTypeEnum.QUESTION_SENT]),
                ApplicantEmployerInteraction.id != current_interaction_in_session.id # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π, —Ç.–∫. –æ–Ω —É–∂–µ is_viewed=True
            )
        )
        remaining_count = remaining_responses_count_q.scalar_one() or 0
        
        await state.update_data(
            employer_can_report_applicant_id=applicant_user.telegram_id,
            employer_has_next_responses=(remaining_count > 0),
            employer_remaining_responses_count=remaining_count
        )
        
        # –°—Ç—Ä–æ–∏–º Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        inline_kb = await build_response_inline_keyboard(remaining_count, applicant_user.telegram_id)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫" –∏–∑ PUSH, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if original_message_with_button:
            try:
                await original_message_with_button.delete()
                print(f"DEBUG: Deleted original PUSH message_id {original_message_with_button.message_id}")
            except Exception as e_del_orig:
                print(f"DEBUG: Failed to delete original PUSH message: {e_del_orig}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –∏ –∫–Ω–æ–ø–∫–∞–º–∏ "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è" / "–°–ª–µ–¥—É—é—â–∏–π"
        try:
            await bot_instance.send_message(chat_id_to_reply, profile_text, parse_mode="HTML", reply_markup=inline_kb)
        except Exception as e_send_response:
            print(f"ERROR sending applicant response to employer: {e_send_response}\n{traceback.format_exc()}")
            await bot_instance.send_message(chat_id_to_reply, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞.")


async def fetch_and_display_first_unread(employer_user_id: int, bot_instance: Bot, chat_id_to_reply: int, state: FSMContext, original_message_with_button: types.Message = None):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    async with AsyncSessionFactory() as session, session.begin():
        emp_profile_q = await session.execute(select(EmployerProfile.id).where(EmployerProfile.user_id == employer_user_id))
        employer_profile_id = emp_profile_q.scalar_one_or_none()

        if not employer_profile_id:
            await bot_instance.send_message(chat_id_to_reply, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É —É–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ø—Ä–æ–ø–∏—à–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
            return

        interaction_q = await session.execute(
            select(ApplicantEmployerInteraction).where(
                ApplicantEmployerInteraction.employer_profile_id == employer_profile_id,
                ApplicantEmployerInteraction.is_viewed_by_employer == False,
                ApplicantEmployerInteraction.interaction_type.in_([InteractionTypeEnum.LIKE, InteractionTypeEnum.QUESTION_SENT])
            ).order_by(ApplicantEmployerInteraction.created_at.asc()).limit(1)
        )
        interaction = interaction_q.scalar_one_or_none()

        if interaction:
            await display_applicant_response(interaction, employer_user_id, bot_instance, chat_id_to_reply, state, original_message_with_button)
        else:
            await bot_instance.send_message(chat_id_to_reply, "–ù–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç.")


# --- –û–°–ù–û–í–ù–´–ï –•–≠–ù–î–õ–ï–†–´ ---

# 1. –î–ª—è Inline-–∫–Ω–æ–ø–∫–∏ –∏–∑ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "view_resp:123")
@employer_responses_router.callback_query(F.data.startswith(VIEW_SPECIFIC_RESPONSE_PREFIX))
async def cq_view_specific_response_from_push(callback_query: types.CallbackQuery, state: FSMContext):
    
    user_id = callback_query.from_user.id
    bot_instance = callback_query.bot
    is_subscribed = await is_user_subscribed_to_channel(user_id, bot_instance)

    if not is_subscribed:
        async with AsyncSessionFactory() as session, session.begin():
            await session.execute(delete(EmployerProfile).where(EmployerProfile.user_id == user_id))
            await session.execute(update(User).where(User.telegram_id == user_id).values(role=None))
        
        await state.clear()
        await callback_query.message.answer(
            "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ —Ç–æ–≥–¥–∞ –≤—ã —Å–Ω–æ–≤–∞ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É",
            reply_markup=ReplyKeyboardRemove()
        )
        try:
            await callback_query.message.delete()
        except:
            pass
        await callback_query.answer()
        return

    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        interaction_id_str = callback_query.data[len(VIEW_SPECIFIC_RESPONSE_PREFIX):]
        interaction_id = int(interaction_id_str)
        await callback_query.answer(f"–ó–∞–≥—Ä—É–∂–∞—é –æ—Ç–∫–ª–∏–∫ ID: {interaction_id}...")
        
        async with AsyncSessionFactory() as session, session.begin():
            interaction_obj_q = await session.execute(
                select(ApplicantEmployerInteraction).where(ApplicantEmployerInteraction.id == interaction_id)
            )
            interaction_obj = interaction_obj_q.scalar_one_or_none()

            if interaction_obj:
                employer_profile_for_interaction_q = await session.execute(
                    select(EmployerProfile.user_id).where(EmployerProfile.id == interaction_obj.employer_profile_id)
                )
                actual_employer_user_id = employer_profile_for_interaction_q.scalar_one_or_none()
                
                if actual_employer_user_id == callback_query.from_user.id:
                    if not interaction_obj.is_viewed_by_employer:
                        interaction_obj.is_viewed_by_employer = True
                        interaction_obj.updated_at = datetime.now(timezone.utc)
                        session.add(interaction_obj)
                    
                    await display_applicant_response(
                        interaction_obj,
                        callback_query.from_user.id,
                        callback_query.bot,
                        callback_query.message.chat.id,
                        state,
                        callback_query.message 
                    )
                else:
                    await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –æ—Ç–∫–ª–∏–∫.", show_alert=True)
                    try: await callback_query.message.delete() 
                    except: pass
            else:
                await callback_query.message.answer("–≠—Ç–æ—Ç –æ—Ç–∫–ª–∏–∫ —É–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
                await callback_query.answer("–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    except (ValueError, TypeError, IndexError) as e:
        print(f"Error parsing interaction_id or handling specific response: {callback_query.data}, error: {e}\n{traceback.format_exc()}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)


# 2. –î–ª—è Reply-–∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏ (N –Ω–æ–≤—ã—Ö)" –∏–∑ –ì–ª–∞–≤–Ω–æ–≥–æ –ú–µ–Ω—é
@employer_responses_router.message(F.text.startswith(BTN_VIEW_RESPONSES_TEXT.split(" (")[0]))
async def msg_view_unread_responses_queue(message: types.Message, state: FSMContext):
    # await message.answer("–ò—â—É –Ω–æ–≤—ã–µ –æ—Ç–∫–ª–∏–∫–∏...") # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await fetch_and_display_first_unread(
        employer_user_id=message.from_user.id,
        bot_instance=message.bot,
        chat_id_to_reply=message.chat.id,
        state=state
        # original_message_with_button –∑–¥–µ—Å—å None, —Ç.–∫. —ç—Ç–æ –Ω–µ –æ—Ç callback'–∞ —Å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    )

# 3. –î–ª—è Inline-–∫–Ω–æ–ø–∫–∏ "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∫–ª–∏–∫"
@employer_responses_router.callback_query(F.data == NEXT_RESPONSE_CALLBACK_DATA)
async def cq_view_next_unread_response(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π: —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∫–ª–∏–∫", –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"
        current_data = await state.get_data()
        applicant_id_for_report = current_data.get('employer_viewing_applicant_user_id')
        
        updated_inline_kb = None
        if applicant_id_for_report: # –ï—Å–ª–∏ –µ—Å—Ç—å ID —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –¥–ª—è –∂–∞–ª–æ–±—ã
            updated_inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"{REPORT_APPLICANT_CALLBACK_DATA_PREFIX}{applicant_id_for_report}")]
            ])
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º
        await callback_query.message.edit_reply_markup(reply_markup=updated_inline_kb)
        await callback_query.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–π...") 
    except Exception as e:
        print(f"Error editing prev message on next_response: {e}")
        await callback_query.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–π...", show_alert=False) # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    await fetch_and_display_first_unread(
        employer_user_id=callback_query.from_user.id,
        bot_instance=callback_query.bot,
        chat_id_to_reply=callback_query.message.chat.id,
        state=state
    )


@employer_responses_router.callback_query(F.data == "view_unread_responses_btn")
async def cq_view_unread_responses_from_push_button(callback_query: types.CallbackQuery, state: FSMContext):
    employer_user_id = callback_query.from_user.id
    
    # --- –ü–†–û–í–ï–†–ö–ê, –°–£–©–ï–°–¢–í–£–ï–¢ –õ–ò –ï–©–ï –ê–ö–¢–ò–í–ù–ê–Ø –ê–ù–ö–ï–¢–ê –°–û–ò–°–ö–ê–¢–ï–õ–Ø ---
    async with AsyncSessionFactory() as session_check_profile, session_check_profile.begin():
        applicant_profile_exists = (await session_check_profile.execute(
            select(ApplicantProfile.id) # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
            .where(ApplicantProfile.user_id == employer_user_id, ApplicantProfile.is_active == True) 
            # user_id_who_interacted - —ç—Ç–æ ID —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–º —Ö—ç–Ω–¥–ª–µ—Ä–µ
        )).scalar_one_or_none()

    if not applicant_profile_exists:
        await state.clear() # –û—á–∏—â–∞–µ–º FSM —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
        await callback_query.message.answer(
            "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        from app.bot import start_keyboard # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=start_keyboard)
        return 
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –º–æ–∂–Ω–æ –µ–≥–æ "–ø–æ–≥–∞—Å–∏—Ç—å"
    if callback_query.message: # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
        try:
            # –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –º–æ–∂–Ω–æ –∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏—Ç—å
            await callback_query.message.edit_text(
                text=f"{callback_query.message.text}\n\n(–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ—Ç–∫–ª–∏–∫–æ–≤...)", 
                reply_markup=None
            ) 
        except Exception as e_edit_notif:
            print(f"DEBUG: Could not edit notification message on click: {e_edit_notif}")
        # –û—á–∏—â–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ë–î
        async with AsyncSessionFactory() as session, session.begin():
            await session.execute(
                update(EmployerProfile)
                .where(EmployerProfile.user_id == employer_user_id)
                .values(active_notification_message_id=None)
            )
    
    await callback_query.answer("–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –æ—Ç–∫–ª–∏–∫–∏...")
    
    # –í—ã–∑—ã–≤–∞–µ–º –≤–∞—à—É —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
    await fetch_and_display_first_unread(
        employer_user_id=employer_user_id,
        bot_instance=callback_query.bot,
        chat_id_to_reply=callback_query.message.chat.id,
        state=state,
        # original_message_with_button –º–æ–∂–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏/—É–¥–∞–ª–∏–ª–∏ –µ–≥–æ
    )
    
@employer_responses_router.callback_query(F.data == "view_unread_responses_push_btn")
async def cq_view_unread_from_push_button_handler(callback_query: types.CallbackQuery, state: FSMContext):
    employer_user_id = callback_query.from_user.id
    message_to_process = callback_query.message # –°–æ–æ–±—â–µ–Ω–∏–µ —Å PUSH-–∫–Ω–æ–ø–∫–æ–π
    
    await callback_query.answer("–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –æ—Ç–∫–ª–∏–∫–∏...") # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    # 1. "–ü–æ–≥–∞—Å–∏—Ç—å" PUSH-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∫–Ω–æ–ø–∫–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç)
    if message_to_process:
        try:
            await message_to_process.edit_text(
                text=f"{message_to_process.text}\n\n(–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é –æ—Ç–∫–ª–∏–∫–∏...)", # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ–∫—Å—Ç—É
                reply_markup=None # –£–±–∏—Ä–∞–µ–º inline –∫–Ω–æ–ø–∫—É
            )
            print(f"DEBUG: PUSH notification message {message_to_process.message_id} edited (button removed).")
        except Exception as e_edit_notif:
            print(f"DEBUG: Could not edit PUSH notification {message_to_process.message_id} on click: {e_edit_notif}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –º–æ–∂–Ω–æ –µ–≥–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ —Å–º—É—â–∞–ª–æ
            try: await message_to_process.delete()
            except: pass
    
    # 2. –û—á–∏—Å—Ç–∏—Ç—å active_notification_message_id –≤ –ë–î, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª
    async with AsyncSessionFactory() as session, session.begin():
        await session.execute(
            update(EmployerProfile)
            .where(EmployerProfile.user_id == employer_user_id)
            .values(active_notification_message_id=None)
        )
        print(f"DEBUG: Cleared active_notification_message_id for employer {employer_user_id}")
    
    # 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ 
    # (fetch_and_display_first_unread –¥–æ–ª–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –∏ —Å–≤–æ–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏)
    await fetch_and_display_first_unread(
        employer_user_id=employer_user_id,
        bot_instance=callback_query.bot, # –∏–ª–∏ message.bot
        chat_id_to_reply=message_to_process.chat.id, 
        state=state
    )
    
    
@employer_responses_router.callback_query(F.data.startswith(REPORT_APPLICANT_CALLBACK_DATA_PREFIX))
async def cq_report_applicant(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        reported_applicant_user_id_str = callback_query.data[len(REPORT_APPLICANT_CALLBACK_DATA_PREFIX):]
        reported_applicant_user_id = int(reported_applicant_user_id_str)
    except (ValueError, TypeError, IndexError):
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±—ã.", show_alert=True)
        return

    reporter_employer_user_id = callback_query.from_user.id
    complaint_obj_to_notify = None

    try:
        async with AsyncSessionFactory() as session, session.begin():
            # --- –ü–û–õ–£–ß–ê–ï–ú ID –ü–†–û–§–ò–õ–Ø –°–û–ò–°–ö–ê–¢–ï–õ–Ø ---
            applicant_profile_q = await session.execute(
                select(ApplicantProfile.id).where(ApplicantProfile.user_id == reported_applicant_user_id)
            )
            reported_applicant_profile_id_val = applicant_profile_q.scalar_one_or_none()
            # ------------------------------------

            new_complaint = Complaint(
                reporter_user_id=reporter_employer_user_id,
                reported_user_id=reported_applicant_user_id, 
                reported_applicant_profile_id=reported_applicant_profile_id_val, 
                reported_employer_profile_id=None, # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º None
                status=ComplaintStatusEnum.NEW
            )
            session.add(new_complaint)
            await session.flush() 
            
            if new_complaint.id:
                complaint_obj_to_notify = new_complaint
                print(f"DEBUG: Complaint (ID: {new_complaint.id}) CREATED by employer {reporter_employer_user_id} on applicant {reported_applicant_user_id} (profile_id: {reported_applicant_profile_id_val})")
            else:
                print(f"CRITICAL ERROR: Complaint ID not generated for report by employer.")
                await callback_query.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∞–ª–æ–±—ã.", show_alert=True)
                return 
        
        if complaint_obj_to_notify:
            from app.handlers.admin_handlers import notify_admins_about_complaint
            try:
                await notify_admins_about_complaint(callback_query.bot, complaint_obj_to_notify)
            except Exception as e_notify:
                print(f"ERROR sending complaint notification to admins from cq_report_applicant: {e_notify}\n{traceback.format_exc()}")
        
        await callback_query.answer("–ñ–∞–ª–æ–±–∞ –Ω–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", show_alert=False) 
            
        # ... (–í–ê–® –ö–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø –†–ê–ë–û–¢–û–î–ê–¢–ï–õ–Ø, –∫–∞–∫ –æ–Ω –±—ã–ª, –æ–Ω –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å) ...
        current_message_text = callback_query.message.text if callback_query.message.text else callback_query.message.caption
        if not current_message_text: current_message_text = "–ê–Ω–∫–µ—Ç–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è."
        updated_text_for_employer = current_message_text + "\n\n<em>(‚úì –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∂–∞–ª–æ–±—É –Ω–∞ —ç—Ç–æ–≥–æ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è)</em>"
        fsm_data = await state.get_data()
        has_next = fsm_data.get('employer_has_next_responses', False)
        remaining_count_for_button = fsm_data.get('employer_remaining_responses_count', 0)
        new_inline_buttons = []
        if has_next:
            next_button_text = f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∫–ª–∏–∫ ({remaining_count_for_button})" if remaining_count_for_button > 0 else "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∫–ª–∏–∫"
            new_inline_buttons.append([InlineKeyboardButton(text=next_button_text, callback_data=NEXT_RESPONSE_CALLBACK_DATA)])
        new_kb_after_report = InlineKeyboardMarkup(inline_keyboard=new_inline_buttons) if new_inline_buttons else None
        try:
            if callback_query.message.photo: 
                await callback_query.message.edit_caption(caption=updated_text_for_employer, reply_markup=new_kb_after_report, parse_mode="HTML")
            else: 
                await callback_query.message.edit_text(updated_text_for_employer, reply_markup=new_kb_after_report, parse_mode="HTML")
        except Exception as e_edit_msg:
            print(f"Failed to edit employer's message after reporting applicant: {e_edit_msg}")
            await callback_query.message.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª–∏–∫–æ–≤' –≤ –º–µ–Ω—é, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –µ—â–µ.", reply_markup=ReplyKeyboardRemove())


    except Exception as e:
        print(f"CRITICAL Error processing report on applicant: {e}\n{traceback.format_exc()}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)