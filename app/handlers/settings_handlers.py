# app/handlers/settings_handlers.py
import traceback
from datetime import datetime, timezone
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram import types
from aiogram.types import (
    Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, 
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.filters import Command, StateFilter

from app.db.database import AsyncSessionFactory
from app.db.models import User, UserRole, ApplicantProfile, EmployerProfile, GenderEnum, WorkFormatEnum, ApplicantEmployerInteraction, InteractionTypeEnum
from sqlalchemy import select, update, delete
from sqlalchemy.sql import func, func as sqlalchemy_func
from app.keyboards.reply_keyboards import start_keyboard

from app.states.editing_states import ApplicantEditProfile, EmployerEditProfile 

from app.handlers.browsing_handlers import show_next_employer_profile

settings_router = Router()

# --- –¢–ï–ö–°–¢–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

APPLICANT_SETTINGS_MENU_TEXT = "–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è:"
applicant_settings_keyboard_active = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")],
        [KeyboardButton(text="–ú–æ—è –∞–Ω–∫–µ—Ç–∞")], # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        [KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")],
        [KeyboardButton(text="–Ø –±–æ–ª—å—à–µ –Ω–µ –∏—â—É —Ä–∞–±–æ—Ç—É")]
    ], resize_keyboard=True
)
applicant_settings_keyboard_inactive = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã")],
        [KeyboardButton(text="–ú–æ—è –∞–Ω–∫–µ—Ç–∞")], # –ò –∑–¥–µ—Å—å –≤–µ–¥–µ—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        [KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")]
    ], resize_keyboard=True
)

EMPLOYER_MAIN_MENU_TEXT = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:"
BTN_VIEW_RESPONSES_TEXT = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏"
employer_main_menu_keyboard_active = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏")],
        [KeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ª—é–¥–µ–π")],
        [KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")],
        #[KeyboardButton(text=BTN_VIEW_RESPONSES_TEXT)]
        # [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏")] # –î–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
    ], resize_keyboard=True
)
employer_main_menu_keyboard_inactive = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏")],
        [KeyboardButton(text="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ª—é–¥–µ–π")],
        [KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")],
        #[KeyboardButton(text=BTN_VIEW_RESPONSES_TEXT)]
        # [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏")] # –î–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
    ], resize_keyboard=True
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –°–û–ò–°–ö–ê–¢–ï–õ–Ø
def get_applicant_edit_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ì–æ—Ä–æ–¥", callback_data="edit_applicant_city")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ü–æ–ª", callback_data="edit_applicant_gender")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_applicant_age")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –û–ø—ã—Ç", callback_data="edit_applicant_experience")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data="back_to_applicant_settings")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –†–ê–ë–û–¢–û–î–ê–¢–ï–õ–Ø
def get_employer_edit_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="–ì–æ—Ä–æ–¥", callback_data="edit_employer_city"),
         InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="edit_employer_company_name")],
        [InlineKeyboardButton(text="–ü–æ–∑–∏—Ü–∏—è", callback_data="edit_employer_position"),
         InlineKeyboardButton(text="–ó–ü", callback_data="edit_employer_salary")],
        [InlineKeyboardButton(text="–ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç", callback_data="edit_employer_min_age"),
         InlineKeyboardButton(text="–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã", callback_data="edit_employer_work_format")],
        [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_employer_description")], # –ë—ã–ª–æ "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏/–≤–∞–∫–∞–Ω—Å–∏–∏"
        [InlineKeyboardButton(text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", callback_data="edit_employer_photo_router")], # callback_data –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫ –æ–ø—Ü–∏—è–º —Ñ–æ—Ç–æ
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è", callback_data="back_to_employer_main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# Reply-–∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è"
cancel_field_edit_button = KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è")
cancel_field_edit_keyboard = ReplyKeyboardMarkup(
    keyboard=[[cancel_field_edit_button]], 
    resize_keyboard=True, 
    one_time_keyboard=True # –ß—Ç–æ–±—ã –æ–Ω–∞ –∏—Å—á–µ–∑–∞–ª–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ú–ï–ù–Æ –ò –ê–ù–ö–ï–¢ –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ---

async def show_applicant_settings_menu(message_to_reply: Message, user_id_param: int, user_first_name: str = None):
    name_prefix = f"{user_first_name}, " if user_first_name else ""
    current_keyboard = applicant_settings_keyboard_active
    async with AsyncSessionFactory() as session, session.begin():
        profile_is_active_status = (await session.execute(
            select(ApplicantProfile.is_active).where(ApplicantProfile.user_id == user_id_param)
        )).scalar_one_or_none()
        if profile_is_active_status is False: # –ü—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
            current_keyboard = applicant_settings_keyboard_inactive
        elif profile_is_active_status is None: # –ü—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç —Å–æ–≤—Å–µ–º (—Ö–æ—Ç—è —Å—é–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è)
             pass # –û—Å—Ç–∞–µ—Ç—Å—è active, –Ω–æ –∫–Ω–æ–ø–∫–∏ "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏ "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –Ω–∞–¥–æ

    await message_to_reply.answer(
        f"{name_prefix}–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫!\n{APPLICANT_SETTINGS_MENU_TEXT}",
        reply_markup=current_keyboard
    )
    
# –ö–Ω–æ–ø–∫–∞ "–ê–Ω–∫–µ—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞–Ω–æ–≤–æ"
@settings_router.message(F.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")
async def employer_fill_again_from_settings(message: Message, state: FSMContext):
    user_id = message.from_user.id
    is_employer = False
    async with AsyncSessionFactory() as session, session.begin():
        user = await session.get(User, user_id)
        if user and user.role == UserRole.EMPLOYER:
            is_employer = True
            await session.execute(delete(EmployerProfile).where(EmployerProfile.user_id == user_id))
            await session.execute(update(User).where(User.telegram_id == user_id).values(role=None))
    
    if is_employer:
        await state.clear()
        from app.bot import start_keyboard # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        await message.answer("–ê–Ω–∫–µ—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:", reply_markup=start_keyboard)
    else:
        display_name = message.from_user.first_name
        # async with AsyncSessionFactory() as session, session.begin(): ... (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–≤–µ–∂–µ–µ –∏–º—è)
        await show_employer_main_menu(message, user_id, display_name) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ã–ª —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å
    
# –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"
@settings_router.message(F.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")
async def applicant_fill_again_from_settings(message: Message, state: FSMContext):
    user_id = message.from_user.id
    is_applicant = False
    
    async with AsyncSessionFactory() as session, session.begin():
        user_obj = await session.get(User, user_id)
        if user_obj and user_obj.role == UserRole.APPLICANT:
            is_applicant = True
            await session.execute(delete(ApplicantProfile).where(ApplicantProfile.user_id == user_id))
            await session.execute(update(User).where(User.telegram_id == user_id).values(role=None, contact_phone=user_obj.contact_phone)) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω!
    
    if is_applicant:
        await state.clear()
        from app.bot import start_keyboard # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        await message.answer(
            "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:", 
            reply_markup=start_keyboard
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫-—Ç–æ –Ω–∞–∂–∞–ª —ç—Ç—É –∫–Ω–æ–ø–∫—É, –Ω–µ –±—É–¥—É—á–∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–º, 
        # –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –µ–≥–æ —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –∏–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ.
        # (–≠—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å)
        if user_obj and user_obj.role == UserRole.EMPLOYER:
            display_name = user_obj.first_name if user_obj.first_name else message.from_user.first_name
            await show_employer_main_menu(message, user_id, display_name)
        else: # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–æ–ª–∏ –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ
            from app.bot import start_keyboard
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏.", reply_markup=start_keyboard)

async def show_employer_main_menu(message_to_reply_to: Message, user_id_param: int, user_first_name: str = None):
    user_id = user_id_param # ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è)
    name_prefix = f"{user_first_name}, " if user_first_name else ""
    
    is_profile_active_for_keyboard = True # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    new_responses_count = 0

    async with AsyncSessionFactory() as session, session.begin():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        employer_profile_data = (await session.execute(
            select(EmployerProfile.id, EmployerProfile.is_active) # –ù–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ ID –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏ is_active –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            .where(EmployerProfile.user_id == user_id)
        )).first() # –ò—Å–ø–æ–ª—å–∑—É–µ–º .first() —Ç–∞–∫ –∫–∞–∫ –æ–∂–∏–¥–∞–µ–º –æ–¥–Ω—É –∏–ª–∏ –Ω–æ–ª—å –∑–∞–ø–∏—Å–µ–π

        if not employer_profile_data:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Ä–æ–ª–∏
            from app.bot import start_keyboard # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
            await message_to_reply_to.answer(
                f"{name_prefix}–ê–Ω–∫–µ—Ç–∞ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", 
                reply_markup=start_keyboard
            )
            print(f"DEBUG show_employer_main_menu: Employer profile NOT FOUND for user_id {user_id}. Showing start_keyboard.")
            return

        # –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID –∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        employer_profile_id_for_count = employer_profile_data.id
        is_profile_active_for_keyboard = employer_profile_data.is_active
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
        count_new_responses_result = await session.execute(
            select(sqlalchemy_func.count(ApplicantEmployerInteraction.id))
            .where(
                ApplicantEmployerInteraction.employer_profile_id == employer_profile_id_for_count,
                ApplicantEmployerInteraction.is_viewed_by_employer == False,
                ApplicantEmployerInteraction.interaction_type.in_([InteractionTypeEnum.LIKE, InteractionTypeEnum.QUESTION_SENT])
            )
        )
        new_responses_count = count_new_responses_result.scalar_one() or 0
        print(f"DEBUG show_employer_main_menu: Employer {user_id}, Profile ID {employer_profile_id_for_count}, New responses count: {new_responses_count}")
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    main_menu_message_text = f"{name_prefix}{EMPLOYER_MAIN_MENU_TEXT}"

    # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∞–∫—Ç–∏–≤–Ω—É—é –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é)
    base_keyboard_buttons = []
    if is_profile_active_for_keyboard:
        base_keyboard_buttons = [row[:] for row in employer_main_menu_keyboard_active.keyboard]
    else:
        base_keyboard_buttons = [row[:] for row in employer_main_menu_keyboard_inactive.keyboard]
    
    view_responses_button_text_updated = BTN_VIEW_RESPONSES_TEXT
    if new_responses_count > 0:
        view_responses_button_text_updated += f" ({new_responses_count} –Ω–æ–≤—ã—Ö)"

    found_and_updated_button = False
    for row in base_keyboard_buttons:
        for i, button in enumerate(row):
            if isinstance(button, KeyboardButton) and button.text.startswith(BTN_VIEW_RESPONSES_TEXT.split(" (")[0]):
                row[i] = KeyboardButton(text=view_responses_button_text_updated) # –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É
                found_and_updated_button = True
                break
        if found_and_updated_button:
            break
    
    # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç BTN_VIEW_RESPONSES_TEXT –∏–∑–º–µ–Ω–∏–ª—Å—è),
    # –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É. –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä.
    if not found_and_updated_button:
        base_keyboard_buttons.append([KeyboardButton(text=view_responses_button_text_updated)])
        print(f"WARN show_employer_main_menu: View responses button not found in base layout, appending new one for user {user_id}.")

    final_keyboard = ReplyKeyboardMarkup(keyboard=base_keyboard_buttons, resize_keyboard=True)
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await message_to_reply_to.answer(main_menu_message_text, reply_markup=final_keyboard)


async def show_applicant_profile_for_editing(target: Message | CallbackQuery, state: FSMContext):
    user_id = target.from_user.id
    message_to_interact_with = target if isinstance(target, Message) else target.message
    profile_display_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—É."
    keyboard_to_show = get_applicant_edit_keyboard()

    async with AsyncSessionFactory() as session, session.begin():
        user_obj = await session.get(User, user_id)
        applicant_p_db = (await session.execute(select(ApplicantProfile).where(ApplicantProfile.user_id == user_id))).scalar_one_or_none()
        if applicant_p_db and user_obj:
            gender_d = getattr(applicant_p_db.gender, 'name', "–ù–µ —É–∫–∞–∑–∞–Ω").title() # Male, Female
            contact_i = user_obj.contact_phone if user_obj.contact_phone else "–ù–µ —É–∫–∞–∑–∞–Ω"
            if contact_i != "–ù–µ —É–∫–∞–∑–∞–Ω" and not contact_i.startswith('+'): contact_i = f"+{contact_i}"
            profile_display_text = (
                f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è:\n\n"
                f"–ì–æ—Ä–æ–¥: {applicant_p_db.city}\n–ü–æ–ª: {gender_d}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {applicant_p_db.age}\n–û–ø—ã—Ç: {applicant_p_db.experience}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact_i}\n–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞' if applicant_p_db.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
                f"–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?"
            )
        else:
            profile_display_text = "–ê–Ω–∫–µ—Ç–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            keyboard_to_show = None 
            from app.bot import start_keyboard
            await message_to_interact_with.answer(profile_display_text, reply_markup=start_keyboard)
            if isinstance(target, CallbackQuery): await target.answer()
            return
            
    await state.set_state(ApplicantEditProfile.waiting_for_field_to_edit)
    if isinstance(target, Message):
        await target.answer(profile_display_text, reply_markup=keyboard_to_show)
    elif isinstance(target, CallbackQuery):
        try: await target.message.edit_text(profile_display_text, reply_markup=keyboard_to_show)
        except: await target.message.answer(profile_display_text, reply_markup=keyboard_to_show)
        await target.answer()


async def show_employer_profile_for_editing(target: Message | CallbackQuery, state: FSMContext):
    user_id = target.from_user.id
    message_to_interact_with = target if isinstance(target, Message) else target.message
    profile_display_text = "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã..."
    keyboard_to_show = get_employer_edit_keyboard()

    async with AsyncSessionFactory() as session, session.begin():
        emp_profile_db = (await session.execute(select(EmployerProfile).where(EmployerProfile.user_id == user_id))).scalar_one_or_none()
        if emp_profile_db:
            wf_d = getattr(emp_profile_db.work_format, 'name', "–ù–µ —É–∫–∞–∑–∞–Ω").title()
            min_age_d = emp_profile_db.min_age_candidate if emp_profile_db.min_age_candidate is not None else "–ù–µ —É–∫–∞–∑–∞–Ω"
            photo_i = "–ï—Å—Ç—å" if emp_profile_db.photo_file_id else "–ù–µ—Ç"
            profile_display_text = (
                f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏:\n\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è: {emp_profile_db.company_name}\n–ì–æ—Ä–æ–¥: {emp_profile_db.city}\n"
                f"–ü–æ–∑–∏—Ü–∏—è: {emp_profile_db.position}\n–ó–ü: {emp_profile_db.salary}\n"
                f"–ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç: {min_age_d}\n–§–æ—Ä–º–∞—Ç: {wf_d}\n–§–æ—Ç–æ: {photo_i}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {emp_profile_db.description[:70]}...\n–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞' if emp_profile_db.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
                f"–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?"
            )
        else:
            profile_display_text = "–ê–Ω–∫–µ—Ç–∞ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            keyboard_to_show = None
            from app.bot import start_keyboard
            await message_to_interact_with.answer(profile_display_text, reply_markup=start_keyboard)
            if isinstance(target, CallbackQuery): await target.answer()
            return

    await state.set_state(EmployerEditProfile.waiting_for_field_to_edit)
    
    # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    current_message_has_photo = bool(message_to_interact_with.photo)
    target_profile_has_photo = bool(emp_profile_db and emp_profile_db.photo_file_id)

    try:
        if isinstance(target, Message): # –í—ã–∑–≤–∞–Ω–æ –∏–∑ message —Ö—ç–Ω–¥–ª–µ—Ä–∞ (–∫–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏")
            await target.answer(text="–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...", reply_markup=ReplyKeyboardRemove()) # –£–±–∏—Ä–∞–µ–º Reply –∫–Ω–æ–ø–∫–∏
            if target_profile_has_photo:
                await target.bot.send_photo(user_id, emp_profile_db.photo_file_id, caption=profile_display_text, reply_markup=keyboard_to_show)
            else:
                await target.answer(profile_display_text, reply_markup=keyboard_to_show)
        
        elif isinstance(target, CallbackQuery): # –í—ã–∑–≤–∞–Ω–æ –∏–∑ callback (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–∞–∑–∞–¥" –∏–ª–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è)
            if target_profile_has_photo:
                if current_message_has_photo: 
                    await target.message.edit_caption(caption=profile_display_text, reply_markup=keyboard_to_show)
                else: 
                    await target.message.delete()
                    await target.message.answer_photo(photo=emp_profile_db.photo_file_id, caption=profile_display_text, reply_markup=keyboard_to_show)
            else: 
                if current_message_has_photo: 
                    await target.message.delete() 
                    await target.message.answer(profile_display_text, reply_markup=keyboard_to_show)
                else: 
                    await target.message.edit_text(profile_display_text, reply_markup=keyboard_to_show)
            await target.answer()
            
    except Exception as e:
        print(f"Error in show_employer_profile_for_editing: {e}\n{traceback.format_exc()}")
        # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if target_profile_has_photo:
            await message_to_interact_with.answer_photo(photo=emp_profile_db.photo_file_id, caption=profile_display_text, reply_markup=keyboard_to_show)
        else:
            await message_to_interact_with.answer(profile_display_text, reply_markup=keyboard_to_show)
        if isinstance(target, CallbackQuery): await target.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


# –¢–µ—Å—Ç–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
@settings_router.message(Command("applicantmenu"))
async def internal_show_applicant_menu_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    display_name = message.from_user.first_name
    async with AsyncSessionFactory() as session, session.begin():
         user_db_data = await session.get(User, user_id)
         if user_db_data:
            if user_db_data.first_name: display_name = user_db_data.first_name
            if user_db_data.role == UserRole.APPLICANT:
                # –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ show_applicant_settings_menu
                await show_applicant_settings_menu(message, user_id, display_name)
                return
    await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π.")

# –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"
@settings_router.message(F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def applicant_continue_browsing(message: Message, state: FSMContext):
    user_id = message.from_user.id
    is_applicant_active = False
    display_name = message.from_user.first_name # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é, –µ—Å–ª–∏ —á—Ç–æ

    async with AsyncSessionFactory() as session, session.begin():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
        db_user_check = await session.get(User, user_id) # –ü–æ–ª—É—á–∞–µ–º User –¥–ª—è –∏–º–µ–Ω–∏
        if db_user_check and db_user_check.first_name:
            display_name = db_user_check.first_name

        applicant_profile_status = (await session.execute(
            select(ApplicantProfile.is_active).where(ApplicantProfile.user_id == user_id)
        )).scalar_one_or_none()
        
        if applicant_profile_status is True: # –ü—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
            is_applicant_active = True
    
    if is_applicant_active:
        await message.answer("üí∏üîç", reply_markup=ReplyKeyboardRemove())
        await show_next_employer_profile(message, user_id, state) # <--- –ü–ï–†–ï–î–ê–ï–ú state

    else: # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
        await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É.", reply_markup=ReplyKeyboardRemove())
        await show_applicant_settings_menu(message, user_id, display_name) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é

# –ö–Ω–æ–ø–∫–∞ "–ú–æ—è –∞–Ω–∫–µ—Ç–∞" (–≤–µ–¥–µ—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é)
@settings_router.message(F.text == "–ú–æ—è –∞–Ω–∫–µ—Ç–∞", StateFilter(None))
async def applicant_my_profile_start_editing(message: Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...", reply_markup=ReplyKeyboardRemove())
    # –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∂–µ—Ç –∞–Ω–∫–µ—Ç—É –∏ Inline-–∫–Ω–æ–ø–∫–∏
    await show_applicant_profile_for_editing(message, state)



# –ö–Ω–æ–ø–∫–∞ "–Ø –±–æ–ª—å—à–µ –Ω–µ –∏—â—É —Ä–∞–±–æ—Ç—É" (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)
@settings_router.message(F.text == "–Ø –±–æ–ª—å—à–µ –Ω–µ –∏—â—É —Ä–∞–±–æ—Ç—É")
async def applicant_deactivate_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    updated_in_db = False
    display_name = message.from_user.first_name
    try:
        async with AsyncSessionFactory() as session, session.begin():
            user_obj = await session.get(User, user_id)
            if user_obj and user_obj.first_name:
                display_name = user_obj.first_name
            
            result = await session.execute(
                update(ApplicantProfile)
                .where(ApplicantProfile.user_id == user_id, ApplicantProfile.is_active == True)
                .values(is_active=False, 
                        deactivation_date=datetime.now(timezone.utc), 
                        updated_at=func.now())
                .returning(ApplicantProfile.id)
            )
            if result.scalar_one_or_none() is not None:
                updated_in_db = True
                # –¢–∞–∫–∂–µ —Å–±—Ä–æ—Å–∏–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ re-engagement —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —Ä–µ—à–∏—Ç —Å–Ω–æ–≤–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                await session.execute(
                    update(User).where(User.telegram_id == user_id).values(last_reengagement_notif_sent_at=None)
                )

        
        if updated_in_db:
            await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        print(f"Error in applicant_deactivate_profile: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã.")
    finally:
        await show_applicant_settings_menu(message, user_id, display_name)

# –ö–Ω–æ–ø–∫–∞ "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã" (–∞–∫—Ç–∏–≤–∞—Ü–∏—è)
@settings_router.message(F.text == "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã")
async def applicant_activate_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    activated_successfully = False
    profile_was_already_active = False
    display_name = message.from_user.first_name

    try:
        async with AsyncSessionFactory() as session, session.begin():
            user_obj = await session.get(User, user_id) # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
            if user_obj:
                if user_obj.first_name: display_name = user_obj.first_name
                if user_obj.role != UserRole.APPLICANT:
                    await message.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π.")
                    await show_applicant_settings_menu(message, user_id, display_name) # –ü–µ—Ä–µ–¥–∞–µ–º user_id
                    return
            else:
                await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                from app.bot import start_keyboard
                await message.answer("–ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=start_keyboard)
                return

            values_to_set_for_activation = {
                "is_active": True,
                "deactivation_date": None, 
                "updated_at": func.now()
            }
            
            update_result = await session.execute(
                update(ApplicantProfile) # –û–±–Ω–æ–≤–ª—è–µ–º ApplicantProfile
                .where(ApplicantProfile.user_id == user_id, ApplicantProfile.is_active == False)
                .values(**values_to_set_for_activation)
                .returning(ApplicantProfile.id)
            )
            
            if update_result.scalar_one_or_none() is not None:
                activated_successfully = True
            else:
                current_profile_status_q = await session.execute(
                    select(ApplicantProfile.is_active).where(ApplicantProfile.user_id == user_id)
                )
                current_profile_is_active = current_profile_status_q.scalar_one_or_none()
                if current_profile_is_active is True:
                    profile_was_already_active = True
        
        if activated_successfully:
            await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        elif profile_was_already_active:
            await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞?", reply_markup=ReplyKeyboardRemove())
            
    except Exception as e:
        print(f"Error in applicant_activate_profile: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã.")
    finally:
        await show_applicant_settings_menu(message, user_id, display_name) # –ü–µ—Ä–µ–¥–∞–µ–º user_id

# --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ö–ï–¢–´ –°–û–ò–°–ö–ê–¢–ï–õ–Ø ---

# Callback-—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫" –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
@settings_router.callback_query(F.data == "back_to_applicant_settings", StateFilter(ApplicantEditProfile.waiting_for_field_to_edit))
async def applicant_back_to_settings_from_edit_fields(callback_query: CallbackQuery, state: FSMContext):
    await state.clear() 
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None) 
    except Exception: pass    
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    display_name = callback_query.from_user.first_name
    async with AsyncSessionFactory() as session, session.begin():
        user_obj = await session.get(User, user_id)
        if user_obj and user_obj.first_name:
            display_name = user_obj.first_name
    await show_applicant_settings_menu(callback_query.message, user_id, display_name)

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ) –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
async def request_new_applicant_field_value(callback_query: CallbackQuery, state: FSMContext, new_fsm_state: State, prompt_text: str):
    await state.set_state(new_fsm_state)
    try:
        await callback_query.message.edit_text(prompt_text, reply_markup=None) # –£–±–∏—Ä–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Reply-–∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è" –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await callback_query.message.answer("–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ:", reply_markup=cancel_field_edit_keyboard)
    except Exception: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
        await callback_query.message.answer(prompt_text, reply_markup=cancel_field_edit_keyboard) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    await callback_query.answer()

# Callback-—Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∞–Ω–∫–µ—Ç–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è)
@settings_router.callback_query(F.data == "edit_applicant_city", StateFilter(ApplicantEditProfile.waiting_for_field_to_edit))
async def edit_applicant_city_start(callback_query: CallbackQuery, state: FSMContext):
    await request_new_applicant_field_value(callback_query, state, ApplicantEditProfile.editing_city, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ (–£–∫—Ä–∞–∏–Ω–∞):")

@settings_router.callback_query(F.data == "edit_applicant_gender", StateFilter(ApplicantEditProfile.waiting_for_field_to_edit))
async def edit_applicant_gender_start(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(ApplicantEditProfile.editing_gender)
    gender_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")], [cancel_field_edit_button]],
        resize_keyboard=True, one_time_keyboard=False # one_time=False —á—Ç–æ–±—ã "–û—Ç–º–µ–Ω–∞" –æ—Å—Ç–∞–ª–∞—Å—å
    )
    try: await callback_query.message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
    except: pass
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª:", reply_markup=gender_kb)
    await callback_query.answer()

@settings_router.callback_query(F.data == "edit_applicant_age", StateFilter(ApplicantEditProfile.waiting_for_field_to_edit))
async def edit_applicant_age_start(callback_query: CallbackQuery, state: FSMContext):
    await request_new_applicant_field_value(callback_query, state, ApplicantEditProfile.editing_age, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º):")

@settings_router.callback_query(F.data == "edit_applicant_experience", StateFilter(ApplicantEditProfile.waiting_for_field_to_edit))
async def edit_applicant_experience_start(callback_query: CallbackQuery, state: FSMContext):
    await request_new_applicant_field_value(callback_query, state, ApplicantEditProfile.editing_experience, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:")

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∞–Ω–∫–µ—Ç—ã
async def update_applicant_field_and_show(message: Message, state: FSMContext, field_name: str, new_value):
    user_id = message.from_user.id
    async with AsyncSessionFactory() as session, session.begin():
        await session.execute(
            update(ApplicantProfile)
            .where(ApplicantProfile.user_id == user_id)
            .values({field_name: new_value, "updated_at": func.now()})
        )
    await message.answer(f"–ü–æ–ª–µ '{field_name.replace('_', ' ').capitalize()}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await show_applicant_profile_for_editing(message, state)

# –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
@settings_router.message(ApplicantEditProfile.editing_city, F.text)
async def process_editing_applicant_city(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è": return await cancel_current_applicant_field_edit(message, state)
    city_parts = [part.capitalize() for part in message.text.strip().split()]
    new_city = " ".join(city_parts)
    if not (2 <= len(new_city) <= 100):
        await message.answer("–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_field_edit_keyboard)
        return
    await update_applicant_field_and_show(message, state, "city", new_city)

@settings_router.message(ApplicantEditProfile.editing_gender, F.text.in_({"–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"}))
async def process_editing_applicant_gender(message: Message, state: FSMContext):
    gender_map = {"–ú—É–∂—Å–∫–æ–π": GenderEnum.MALE, "–ñ–µ–Ω—Å–∫–∏–π": GenderEnum.FEMALE}
    await update_applicant_field_and_show(message, state, "gender", gender_map[message.text])
    # await message.delete() # Reply –∫–Ω–æ–ø–∫–∞ —Å–∞–º–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –µ—Å–ª–∏ one_time_keyboard=True

@settings_router.message(ApplicantEditProfile.editing_gender, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è") # –û—Ç–¥–µ–ª—å–Ω—ã–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∞ –≤ Reply
async def cancel_gender_edit_button(message: Message, state: FSMContext):
    await cancel_current_applicant_field_edit(message, state)

@settings_router.message(ApplicantEditProfile.editing_gender) # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª–∞
async def process_invalid_editing_applicant_gender(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")

@settings_router.message(ApplicantEditProfile.editing_age, F.text)
async def process_editing_applicant_age(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è": return await cancel_current_applicant_field_edit(message, state)
    if not message.text.isdigit():
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_field_edit_keyboard)
        return
    new_age = int(message.text)
    if not (16 <= new_age <= 70):
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –æ—Ç 16 –¥–æ 70. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_field_edit_keyboard)
        return
    await update_applicant_field_and_show(message, state, "age", new_age)

@settings_router.message(ApplicantEditProfile.editing_experience, F.text)
async def process_editing_applicant_experience(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è": return await cancel_current_applicant_field_edit(message, state)
    new_experience = message.text.strip()
    if not (2 <= len(new_experience) <= 2000):
        await message.answer("–û–ø—ã—Ç –æ—Ç 2 –¥–æ 2000 —Å–∏–º–≤. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_field_edit_keyboard)
        return
    await update_applicant_field_and_show(message, state, "experience", new_experience)

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è –°–û–ò–°–ö–ê–¢–ï–õ–Ø (–¥–ª—è Reply-–∫–Ω–æ–ø–∫–∏)
async def cancel_current_applicant_field_edit(message: Message, state: FSMContext):
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await show_applicant_profile_for_editing(message, state)

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
@settings_router.message(Command("cancel_edit_applicant"), StateFilter(ApplicantEditProfile))
async def cancel_all_applicant_editing(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    user_id = message.from_user.id
    display_name = message.from_user.first_name # ... (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–∑ –ë–î) ...
    await show_applicant_settings_menu(message, user_id, display_name)


# –ö–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
@settings_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏", StateFilter(None))
async def employer_start_editing_profile_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    async with AsyncSessionFactory() as session, session.begin():
        user = await session.get(User, user_id)
        if not (user and user.role == UserRole.EMPLOYER):
            await message.answer("–≠—Ç–∞ –æ–ø—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π.", reply_markup=ReplyKeyboardRemove())
            if user and user.role == UserRole.APPLICANT:
                display_name = user.first_name if user.first_name else message.from_user.first_name
                await show_applicant_settings_menu(message, user_id, display_name)
            else:
                from app.bot import start_keyboard
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=start_keyboard)
            return
            
    await message.answer("–ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–¥–∞–∫—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏...", reply_markup=ReplyKeyboardRemove())
    await show_employer_profile_for_editing(message, state)


# –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ª—é–¥–µ–π"
@settings_router.message(F.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ª—é–¥–µ–π")
async def employer_deactivate_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    updated = False
    display_name = message.from_user.first_name
    try:
        async with AsyncSessionFactory() as session, session.begin():
            user_obj = await session.get(User, user_id)
            if user_obj:
                if user_obj.first_name: display_name = user_obj.first_name
                if user_obj.role != UserRole.EMPLOYER: # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ø–∞–ª–∏ –Ω–µ —Ç—É–¥–∞
                    await message.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π.")
                    await show_employer_main_menu(message, user_id, display_name)
                    return

            result = await session.execute(
                update(EmployerProfile)
                .where(EmployerProfile.user_id == user_id, EmployerProfile.is_active == True)
                .values(is_active=False, 
                        deactivation_date=datetime.now(timezone.utc), 
                        updated_at=func.now())
                .returning(EmployerProfile.id)
            )
            if result.scalar_one_or_none() is not None: 
                updated = True
                await session.execute(
                    update(User).where(User.telegram_id == user_id).values(last_reengagement_notif_sent_at=None)
                )
        
        if updated:
            await message.answer("–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=employer_main_menu_keyboard_inactive)
        else:
            await message.answer("–ü–æ–∏—Å–∫ —É–∂–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞.", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        print(f"Error in employer_deactivate_profile: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–∏—Å–∫–∞.")
    #finally:
        #await show_employer_main_menu(message, user_id, display_name)

# –ö–Ω–æ–ø–∫–∞ "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ª—é–¥–µ–π"
@settings_router.message(F.text == "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ª—é–¥–µ–π")
async def employer_activate_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    activated_successfully = False # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    profile_was_already_active = False
    display_name = message.from_user.first_name

    try:
        async with AsyncSessionFactory() as session, session.begin():
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –∏ –≤–∑—è—Ç—å –∏–º—è
            user_obj = await session.get(User, user_id)
            if user_obj:
                if user_obj.first_name: 
                    display_name = user_obj.first_name
                if user_obj.role != UserRole.EMPLOYER:
                    await message.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π.")
                    await show_employer_main_menu(message, user_id, display_name)
                    return
            else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, —á—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –µ—Å–ª–∏ –æ–Ω –¥–æ—à–µ–ª –¥–æ —ç—Ç–æ–≥–æ –º–µ–Ω—é
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                from app.bot import start_keyboard # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=start_keyboard)
                return

            # –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –∏ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—É –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            values_to_set_for_activation = {
                "is_active": True,
                "deactivation_date": None, 
                "updated_at": func.now()
            }
            
            update_result = await session.execute(
                update(EmployerProfile)
                .where(EmployerProfile.user_id == user_id, EmployerProfile.is_active == False) # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
                .values(**values_to_set_for_activation)
                .returning(EmployerProfile.id) # –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
            )
            
            if update_result.scalar_one_or_none() is not None:
                activated_successfully = True
            else:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω
                current_profile_status_q = await session.execute(
                    select(EmployerProfile.is_active).where(EmployerProfile.user_id == user_id)
                )
                current_profile_is_active = current_profile_status_q.scalar_one_or_none()
                if current_profile_is_active is True:
                    profile_was_already_active = True
                # –ï—Å–ª–∏ current_profile_is_active is None, –∑–Ω–∞—á–∏—Ç, –ø—Ä–æ—Ñ–∏–ª—è –≤–æ–æ–±—â–µ –Ω–µ—Ç (—Ö–æ—Ç—è user –µ—Å—Ç—å)
                # –ï—Å–ª–∏ current_profile_is_active is False, –Ω–æ update –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if activated_successfully:
            await message.answer("–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=employer_main_menu_keyboard_active)
        elif profile_was_already_active:
            await message.answer("–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=employer_main_menu_keyboard_active)
        else:
            # –≠—Ç–æ –º–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è EmployerProfile –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id –≤–æ–æ–±—â–µ –Ω–µ—Ç,
            # –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω –±—ã–ª is_active=False, –Ω–æ update –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É–ª —Å—Ç—Ä–æ–∫–∏.
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫. –í–æ–∑–º–æ–∂–Ω–æ, –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=ReplyKeyboardRemove())
            
    except Exception as e:
        print(f"Error in employer_activate_profile: {e}\n{traceback.format_exc()}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞.")
    #finally:
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
        # user_id –∏ display_name —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É
        #await show_employer_main_menu(message, user_id, display_name)



# --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ö–ï–¢–´ –†–ê–ë–û–¢–û–î–ê–¢–ï–õ–Ø ---

# Callback –¥–ª—è "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è" –∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@settings_router.callback_query(F.data == "back_to_employer_main_menu", StateFilter(EmployerEditProfile.waiting_for_field_to_edit))
async def employer_back_to_main_menu_from_field_edit(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    try: await callback_query.message.edit_reply_markup(reply_markup=None)
    except: pass
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    display_name = callback_query.from_user.first_name
    async with AsyncSessionFactory() as session, session.begin():
        user_obj = await session.get(User, user_id)
        if user_obj and user_obj.first_name: display_name = user_obj.first_name
    await show_employer_main_menu(callback_query.message, user_id, display_name)

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ) —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º
async def request_new_employer_field_value(callback_query: CallbackQuery, state: FSMContext, new_fsm_state: State, prompt_text: str):
    await state.set_state(new_fsm_state)
    try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(prompt_text, reply_markup=cancel_field_edit_keyboard) # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º Reply-–∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω—ã
    except Exception: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ)
        await callback_query.message.delete() # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
        await callback_query.message.answer(prompt_text, reply_markup=cancel_field_edit_keyboard) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback_query.answer()

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∞–Ω–∫–µ—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def update_employer_field_and_show(message_or_target: Message | CallbackQuery, state: FSMContext, field_name: str, new_value):
    user_id = message_or_target.from_user.id
    message_for_reply = message_or_target if isinstance(message_or_target, Message) else message_or_target.message
    
    async with AsyncSessionFactory() as session, session.begin():
        await session.execute(
            update(EmployerProfile)
            .where(EmployerProfile.user_id == user_id)
            .values({field_name: new_value, "updated_at": func.now()})
        )
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–¥–µ—Å—å, —Ç.–∫. show_..._for_editing —Å–∞–º–∞ –æ–±–Ω–æ–≤–∏—Ç –∞–Ω–∫–µ—Ç—É
    await show_employer_profile_for_editing(message_for_reply, state) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# --- Callback-—Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ü–û–õ–Ø –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å) ---
@settings_router.callback_query(F.data == "edit_employer_city", StateFilter(EmployerEditProfile.waiting_for_field_to_edit))
async def edit_employer_city_start(callback_query: CallbackQuery, state: FSMContext):
    await request_new_employer_field_value(callback_query, state, EmployerEditProfile.editing_city, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")

@settings_router.callback_query(F.data == "edit_employer_company_name", StateFilter(EmployerEditProfile.waiting_for_field_to_edit))
async def edit_employer_company_name_start(callback_query: CallbackQuery, state: FSMContext):
    await request_new_employer_field_value(callback_query, state, EmployerEditProfile.editing_company_name, "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")

@settings_router.callback_query(F.data == "edit_employer_position", StateFilter(EmployerEditProfile.waiting_for_field_to_edit))
async def edit_employer_position_start(callback_query: CallbackQuery, state: FSMContext):
    await request_new_employer_field_value(callback_query, state, EmployerEditProfile.editing_position, "–ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:")

@settings_router.callback_query(F.data == "edit_employer_salary", StateFilter(EmployerEditProfile.waiting_for_field_to_edit))
async def edit_employer_salary_start(callback_query: CallbackQuery, state: FSMContext):
    await request_new_employer_field_value(callback_query, state, EmployerEditProfile.editing_salary, "–ù–æ–≤–∞—è –ó–ü:")

@settings_router.callback_query(F.data == "edit_employer_min_age", StateFilter(EmployerEditProfile.waiting_for_field_to_edit))
async def edit_employer_min_age_start(callback_query: CallbackQuery, state: FSMContext):
    await request_new_employer_field_value(callback_query, state, EmployerEditProfile.editing_min_age, "–ù–æ–≤—ã–π –º–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –∏–ª–∏ '-'):")

@settings_router.callback_query(F.data == "edit_employer_description", StateFilter(EmployerEditProfile.waiting_for_field_to_edit))
async def edit_employer_description_start(callback_query: CallbackQuery, state: FSMContext):
    await request_new_employer_field_value(callback_query, state, EmployerEditProfile.editing_company_description, "–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")

@settings_router.callback_query(F.data == "edit_employer_work_format", StateFilter(EmployerEditProfile.waiting_for_field_to_edit))
async def edit_employer_work_format_start(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(EmployerEditProfile.editing_work_format)
    work_format_reply_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ñ–ª–∞–π–Ω"), KeyboardButton(text="–û–Ω–ª–∞–π–Ω")], [cancel_field_edit_button]],
        resize_keyboard=True, one_time_keyboard=False 
    )
    try: await callback_query.message.delete()
    except: pass
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:", reply_markup=work_format_reply_kb)
    await callback_query.answer()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –û–ë–†–ê–ë–û–¢–ö–ò –í–í–û–î–ê –¥–ª—è –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è ---

# –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –¥–ª—è Reply-–∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è" (–¥–ª—è –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è)
@settings_router.message(StateFilter(
    EmployerEditProfile.editing_city, EmployerEditProfile.editing_company_name, 
    EmployerEditProfile.editing_position, EmployerEditProfile.editing_salary,
    EmployerEditProfile.editing_min_age, EmployerEditProfile.editing_company_description,
    EmployerEditProfile.editing_work_format 
    # –ù–µ –≤–∫–ª—é—á–∞–µ–º editing_photo_upload, —Ç.–∫. –¥–ª—è –Ω–µ–≥–æ —Å–≤–æ—è inline-–æ—Ç–º–µ–Ω–∞
), F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è")
async def employer_cancel_current_field_input(message: Message, state: FSMContext):
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await show_employer_profile_for_editing(message, state)

# –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
@settings_router.message(EmployerEditProfile.editing_city, F.text)
async def process_editing_employer_city(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è": return await employer_cancel_current_field_input(message, state)
    city_parts = [part.capitalize() for part in message.text.strip().split()]
    new_city = " ".join(city_parts)
    if not (2 <= len(new_city) <= 100):
        await message.answer("–ì–æ—Ä–æ–¥: 2-100 —Å–∏–º–≤.", reply_markup=cancel_field_edit_keyboard)
        return
    await update_employer_field_and_show(message, state, "city", new_city)

# (–í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –î–û–ü–ò–°–ê–¢–¨ –æ—Å—Ç–∞–ª—å–Ω—ã–µ `process_editing_employer_...` —Ö—ç–Ω–¥–ª–µ—Ä—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –≥–æ—Ä–æ–¥–æ–º)
# –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è company_name:
@settings_router.message(EmployerEditProfile.editing_company_name, F.text)
async def process_editing_employer_company_name(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è": return await employer_cancel_current_field_input(message, state)
    new_name = message.text.strip()
    if not (2 <= len(new_name) <= 200):
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ: 2-200 —Å–∏–º–≤.", reply_markup=cancel_field_edit_keyboard)
        return
    await update_employer_field_and_show(message, state, "company_name", new_name)

@settings_router.message(EmployerEditProfile.editing_position, F.text)
async def process_editing_employer_position(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è": return await employer_cancel_current_field_input(message, state)
    new_pos = message.text.strip()
    if not (3 <= len(new_pos) <= 150):
        await message.answer("–ü–æ–∑–∏—Ü–∏—è: 3-150 —Å–∏–º–≤.", reply_markup=cancel_field_edit_keyboard)
        return
    await update_employer_field_and_show(message, state, "position", new_pos)

@settings_router.message(EmployerEditProfile.editing_salary, F.text)
async def process_editing_employer_salary(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è": return await employer_cancel_current_field_input(message, state)
    new_salary = message.text.strip()
    if not (3 <= len(new_salary) <= 100):
        await message.answer("–ó–ü: 3-100 —Å–∏–º–≤.", reply_markup=cancel_field_edit_keyboard)
        return
    await update_employer_field_and_show(message, state, "salary", new_salary)

@settings_router.message(EmployerEditProfile.editing_min_age, F.text)
async def process_editing_employer_min_age(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è": return await employer_cancel_current_field_input(message, state)
    # ... (–≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è min_age, –≤—ã–∑—ã–≤–∞—é—â–∞—è update_employer_field_and_show)
    min_age_text = message.text.strip()
    new_min_age_val = None
    if min_age_text in ["-", "0"]: new_min_age_val = None
    elif min_age_text.isdigit():
        age_val = int(min_age_text)
        if 16 <= age_val <= 70: new_min_age_val = age_val
        else:
            await message.answer("–í–æ–∑—Ä–∞—Å—Ç –æ—Ç 16 –¥–æ 70 –∏–ª–∏ '-'/'0'.", reply_markup=cancel_field_edit_keyboard); return
    else: await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '-'/'0'.", reply_markup=cancel_field_edit_keyboard); return
    await update_employer_field_and_show(message, state, "min_age_candidate", new_min_age_val)


@settings_router.message(EmployerEditProfile.editing_company_description, F.text)
async def process_editing_employer_description(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è": return await employer_cancel_current_field_input(message, state)
    new_desc = message.text.strip()
    if not (10 <= len(new_desc) <= 2000):
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ: 10-2000 —Å–∏–º–≤.", reply_markup=cancel_field_edit_keyboard)
        return
    await update_employer_field_and_show(message, state, "description", new_desc)

@settings_router.message(EmployerEditProfile.editing_work_format, F.text.in_({"–û—Ñ–ª–∞–π–Ω", "–û–Ω–ª–∞–π–Ω"}))
async def process_editing_employer_work_format(message: Message, state: FSMContext):
    work_format_map = {"–û—Ñ–ª–∞–π–Ω": WorkFormatEnum.OFFLINE, "–û–Ω–ª–∞–π–Ω": WorkFormatEnum.ONLINE}
    await update_employer_field_and_show(message, state, "work_format", work_format_map[message.text])
    # ReplyKeyboardRemove –Ω–µ –Ω—É–∂–Ω–æ, —Ç.–∫. update_... –≤—ã–∑–æ–≤–µ—Ç show_..._for_editing, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω–µ—Ç inline

@settings_router.message(EmployerEditProfile.editing_work_format, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è")
async def cancel_work_format_edit_button(message: Message, state: FSMContext): # –û—Ç–¥–µ–ª—å–Ω—ã–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∏–∑ —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await employer_cancel_current_field_input(message, state)

@settings_router.message(EmployerEditProfile.editing_work_format) # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
async def process_invalid_editing_employer_work_format(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=cancel_field_edit_keyboard)


# ---- –°–ï–ö–¶–ò–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –§–û–¢–û –†–ê–ë–û–¢–û–î–ê–¢–ï–õ–Ø (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∂–µ–ª–∞–µ–º–æ–π –ª–æ–≥–∏–∫–∏) ----

# Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è" -> –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ
@settings_router.callback_query(F.data == "edit_employer_photo_router", StateFilter(EmployerEditProfile.waiting_for_field_to_edit))
async def route_to_employer_photo_options(callback_query: CallbackQuery, state: FSMContext):
    await show_employer_photo_options_menu_logic(callback_query, state)

async def show_employer_photo_options_menu_logic(target: types.CallbackQuery, state: FSMContext): # –ò–∑–º–µ–Ω–∏–ª —Ç–∏–ø target –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    user_id = target.from_user.id
    message_to_handle = target.message # –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª—è—Ç—å

    await state.set_state(EmployerEditProfile.editing_photo_option)

    current_photo_file_id = None
    async with AsyncSessionFactory() as session, session.begin():
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º select().where() –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ user_id
        profile_query = await session.execute(
            select(EmployerProfile).where(EmployerProfile.user_id == user_id)
        )
        employer_profile = profile_query.scalar_one_or_none()
        
        if employer_profile:
            current_photo_file_id = employer_profile.photo_file_id

    buttons_list = [[InlineKeyboardButton(text="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="emp_photo_ask_new_photo")]]
    if current_photo_file_id:
        buttons_list.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="emp_photo_delete_action")])
    buttons_list.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ (–∫ –ø–æ–ª—è–º –∞–Ω–∫–µ—Ç—ã)", callback_data="emp_photo_back_to_fields_from_options")])
    
    options_kb = InlineKeyboardMarkup(inline_keyboard=buttons_list)

    text_to_show = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∫–æ–º–ø–∞–Ω–∏–∏/–≤–∞–∫–∞–Ω—Å–∏–∏.\n"
    
    # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        if current_photo_file_id:
            text_to_show += "\n–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ." # –£–ø—Ä–æ—Å—Ç–∏–ª —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if message_to_handle.photo: 
                await message_to_handle.edit_caption(caption=text_to_show, reply_markup=options_kb)
            else: 
                await message_to_handle.delete()
                await message_to_handle.answer_photo(photo=current_photo_file_id, caption=text_to_show, reply_markup=options_kb)
        else:
            text_to_show += "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞."
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ), —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ —à–ª–µ–º —Ç–µ–∫—Å—Ç
            if message_to_handle.photo:
                await message_to_handle.delete()
                await message_to_handle.answer(text_to_show, reply_markup=options_kb)
            else: # –ï—Å–ª–∏ –∏ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                await message_to_handle.edit_text(text_to_show, reply_markup=options_kb)
        
        await target.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π callback_query
            
    except Exception as e:
        print(f"Error showing/editing in show_employer_photo_options_menu_logic: {e}\n{traceback.format_exc()}")
        # –§–æ–ª–ª–±—ç–∫: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–º–∞–ª–æ—Å—å
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç –±–æ—Ç–∞, –∞ –Ω–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        fallback_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π.\n" + ("–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)." if current_photo_file_id else "–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
        if current_photo_file_id:
            await target.bot.send_photo(chat_id=user_id, photo=current_photo_file_id, caption=fallback_text, reply_markup=options_kb)
        else:
            await target.bot.send_message(chat_id=user_id, text=fallback_text, reply_markup=options_kb)
        if isinstance(target, types.CallbackQuery): # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π callback
             await target.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑–∞–Ω—ã –æ–ø—Ü–∏–∏.")


@settings_router.callback_query(F.data == "emp_photo_ask_new_photo", StateFilter(EmployerEditProfile.editing_photo_option))
async def ask_for_new_employer_photo_action(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(EmployerEditProfile.editing_photo_upload)
    cancel_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏", callback_data="emp_photo_cancel_this_upload_attempt")]])
    try: await callback_query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:", reply_markup=cancel_kb)
    except: await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:", reply_markup=cancel_kb)
    await callback_query.answer()

@settings_router.message(EmployerEditProfile.editing_photo_upload, F.photo)
async def handle_new_employer_photo_upload(message: Message, state: FSMContext):
    new_photo_id = message.photo[-1].file_id
    await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
    await update_employer_field_and_show(message, state, "photo_file_id", new_photo_id)

@settings_router.callback_query(F.data == "emp_photo_cancel_this_upload_attempt", StateFilter(EmployerEditProfile.editing_photo_upload))
async def cancel_this_employer_photo_upload(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await show_employer_photo_options_menu_logic(callback_query, state) # –í–æ–∑–≤—Ä–∞—Ç –∫ –æ–ø—Ü–∏—è–º —Ñ–æ—Ç–æ

@settings_router.callback_query(F.data == "emp_photo_delete_action", StateFilter(EmployerEditProfile.editing_photo_option))
async def do_delete_employer_photo(callback_query: CallbackQuery, state: FSMContext):
    async with AsyncSessionFactory() as session, session.begin():
        await session.execute(update(EmployerProfile).where(EmployerProfile.user_id == callback_query.from_user.id).values(photo_file_id=None, updated_at=func.now()))
    await callback_query.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞.")
    await show_employer_profile_for_editing(callback_query, state) # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–µ–π

@settings_router.callback_query(F.data == "emp_photo_back_to_fields_from_options", StateFilter(EmployerEditProfile.editing_photo_option))
async def back_to_fields_from_photo_options(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await show_employer_profile_for_editing(callback_query, state) # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–µ–π

# –û–±—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
@settings_router.message(Command("cancel_edit_employer"), StateFilter(EmployerEditProfile))
async def cancel_all_employer_editing(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    user_id = message.from_user.id
    display_name = message.from_user.first_name 
    async with AsyncSessionFactory() as session, session.begin():
        user = await session.get(User, user_id)
        if user and user.first_name: display_name = user.first_name
    await show_employer_main_menu(message, user_id, display_name)
    
    
 
    
