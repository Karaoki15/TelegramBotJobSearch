# app/handlers/admin_handlers.py
import traceback
import secrets 
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, StateFilter, Filter
from aiogram import Bot

from app.config import ADMIN_IDS
from app.db.database import AsyncSessionFactory

from app.db.models import User, UserRole, BotSettings, EmployerProfile, ApplicantProfile, Complaint, ComplaintStatusEnum, WorkFormatEnum, MotivationalContent, MotivationalContentTypeEnum, ReferralLink, ReferralUsage
from sqlalchemy import select, update, delete, func 
from sqlalchemy.orm import selectinload 
from sqlalchemy.dialects.postgresql import insert
import sqlalchemy
from app.handlers.browsing_handlers import format_employer_profile_for_applicant



from app.states.admin_states import AdminStates, AdminAddDummyEmployer, AdminReferralManagement


from app.handlers.settings_handlers import show_applicant_settings_menu, show_employer_main_menu

DUMMY_PROFILE_CALLBACK_PREFIX = "dummy_profile_"
REAL_EMP_PROFILE_CALLBACK_PREFIX = "real_emp_profile_"
REAL_EMP_LIST_PAGE_CALLBACK_PREFIX = "real_emp_page_"
USER_DETAILS_CALLBACK_PREFIX = "admin_user_details_"
MOTIVATION_CALLBACK_PREFIX = "admin_motiv_"
REFERRAL_CALLBACK_PREFIX = "admin_ref_"


admin_router = Router()

# --- –§–ò–õ–¨–¢–† –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ---
class IsAdminFilter(Filter):
    async def __call__(self, message: Message) -> bool:
        if not message.from_user:
            return False
        return message.from_user.id in ADMIN_IDS

# --- –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ –ê–î–ú–ò–ù–ö–ò (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É) ---
admin_main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="ü§ñ –ê–Ω—Ç–∏-—Å–ø–∞–º –ü—É—Å—Ç—ã—à–∫–∞")],
        [KeyboardButton(text="üìù –ü—É—Å—Ç—ã—à–∫–∏ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton(text="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä/–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ê–Ω–∫–µ—Ç –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton(text="üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–æ–º")], 
        [KeyboardButton(text="‚ÑπÔ∏è –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID")],
        [KeyboardButton(text="üé¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º –ö–æ–Ω—Ç–µ–Ω—Ç–æ–º")],
        [KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –ê–¥–º–∏–Ω–∫–∏")]
    ],
    resize_keyboard=True
)
ADMIN_GREETING = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!"

cancel_field_edit_button = KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ") # –ú–æ–∂–Ω–æ —Ç–µ–∫—Å—Ç –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥"
cancel_field_edit_keyboard = ReplyKeyboardMarkup(
    keyboard=[[cancel_field_edit_button]], 
    resize_keyboard=True, 
    one_time_keyboard=True 
)

motivation_type_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í–∏–¥–µ–æ"), KeyboardButton(text="–§–æ—Ç–æ")],
        [KeyboardButton(text="–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")] # –û–±—â–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è FSM
    ],
    resize_keyboard=True,
    one_time_keyboard=True # –ò–ª–∏ False, —á—Ç–æ–±—ã "–û—Ç–º–µ–Ω–∞" –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å
)


def get_manage_dummy_profiles_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—É—Å—Ç—ã—à–∫—É", callback_data="admin_action_create_dummy")],
        [InlineKeyboardButton(text="üìÑ –°–ø–∏—Å–æ–∫/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç—ã—à–µ–∫ (TODO)", callback_data="admin_action_list_dummies")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_back_to_main_from_dummies")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@admin_router.message(Command("admin"), IsAdminFilter())
async def admin_panel_start(message: Message, state: FSMContext):
    print(f"DEBUG: Admin {message.from_user.id} entered admin panel.")
    await state.set_state(AdminStates.in_panel)
    await message.answer(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)

@admin_router.message(Command("admin")) # –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª IsAdminFilter
async def admin_panel_attempt_not_admin(message: Message):
    print(f"DEBUG: Non-admin {message.from_user.id} tried to access /admin.")
    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@admin_router.message(F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –ê–¥–º–∏–Ω–∫–∏", StateFilter(AdminStates.in_panel))
async def admin_panel_exit(message: Message, state: FSMContext):
    user_id = message.from_user.id
    print(f"DEBUG: Admin {user_id} is exiting admin panel.")
    await state.clear() 
    
    display_name = message.from_user.first_name
    user_role_on_exit = None
    
    async with AsyncSessionFactory() as session, session.begin():
        user_db = await session.get(User, user_id)
        if user_db:
            if user_db.first_name: display_name = user_db.first_name
            user_role_on_exit = user_db.role
            print(f"DEBUG: User {user_id} role after exit attempt: {user_role_on_exit}")
        else:
            print(f"DEBUG: User {user_id} not found in DB upon exiting admin panel.")

    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=ReplyKeyboardRemove())

    if user_role_on_exit == UserRole.APPLICANT:
        await show_applicant_settings_menu(message, user_id, display_name)
    elif user_role_on_exit == UserRole.EMPLOYER:
        await show_employer_main_menu(message, user_id, display_name)
    else: 
        from app.bot import start_keyboard 
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:", reply_markup=start_keyboard)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø BOT_SETTINGS (–¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—É—Å—Ç—ã—à–∫–∏) ---
async def get_bot_setting(session, key: str) -> str | None: # –£–±—Ä–∞–ª —Ç–∏–ø AsyncSession –∏–∑ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã, —Ç.–∫. —Å–µ—Å—Å–∏—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
    result = await session.execute(select(BotSettings.value_str).where(BotSettings.setting_key == key))
    return result.scalar_one_or_none()

async def update_bot_setting(session, key: str, value_str: str | None = None): # –£–ø—Ä–æ—Å—Ç–∏–ª, —Ç–æ–ª—å–∫–æ value_str
    stmt = insert(BotSettings).values(setting_key=key, value_str=value_str)
    stmt = stmt.on_conflict_do_update(
        index_elements=['setting_key'], 
        set_=dict(value_str=value_str) 
    )
    await session.execute(stmt)

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ù–¢–ò-–°–ü–ê–ú –ü–£–°–¢–´–®–ö–û–ô ---

@admin_router.message(StateFilter(
    AdminStates.editing_antispam_dummy_text, 
    AdminStates.editing_antispam_dummy_photo # –ò –¥—Ä—É–≥–∏–µ –±—É–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º, –µ—Å–ª–∏ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –æ–±—â–µ–π
), F.text.startswith("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ")) # –ò—Å–ø–æ–ª—å–∑—É–µ–º startswith –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —á—É—Ç—å –¥—Ä—É–≥–æ–π
async def admin_cancel_current_field_edit_by_button(message: Message, state: FSMContext):
    current_fsm_state_str = await state.get_state() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑ –∫–∞–∫–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º—ã –æ—Ç–º–µ–Ω—è–µ–º, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–º–µ–Ω—é
    if current_fsm_state_str in [AdminStates.editing_antispam_dummy_text.state, 
                                 AdminStates.editing_antispam_dummy_photo.state]:
        await state.set_state(AdminStates.in_panel) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É—Å—Ç—ã—à–∫–∏
        await show_antispam_dummy_config_menu(message, state)
    else: 
        # –ï—Å–ª–∏ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –±—É–¥—É—â–µ–º,
        # –º–æ–∂–Ω–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.
        print(f"DEBUG: admin_cancel_current_field_edit_by_button called from unexpected state: {current_fsm_state_str}")
        await state.set_state(AdminStates.in_panel)
        await message.answer(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—É—Å—Ç—ã—à–∫–∏ (–∏–¥–µ—Ç –ü–û–°–õ–ï —Ö—ç–Ω–¥–ª–µ—Ä–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã)
@admin_router.message(AdminStates.editing_antispam_dummy_text, F.text)
async def admin_process_antispam_text(message: Message, state: FSMContext):
    new_text = message.text.strip()
    if not (10 <= len(new_text) <= 1000): # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
        await message.answer(
            "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=cancel_field_edit_keyboard # –°–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π
        )
        return # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    
    async with AsyncSessionFactory() as session, session.begin():
        await update_bot_setting(session, "antispam_dummy_text", new_text)
    
    await message.answer("–¢–µ–∫—Å—Ç –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—É—Å—Ç—ã—à–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove())
    
    await show_antispam_dummy_config_menu(message, state) # state –∑–¥–µ—Å—å –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ show_... –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—É—Å—Ç—ã—à–∫–æ–π
def get_antispam_dummy_management_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="admin_as_edit_text")],
        [InlineKeyboardButton(text="üñºÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="admin_as_edit_photo")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="admin_as_delete_photo")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_as_back_to_main_panel_cb")] # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª callback_data
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏-spam –ø—É—Å—Ç—ã—à–∫–∏ –∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def show_antispam_dummy_config_menu(target_message_or_cq: Message | CallbackQuery, state: FSMContext):
    message_to_act_on = target_message_or_cq.message if isinstance(target_message_or_cq, CallbackQuery) else target_message_or_cq
    user_id = target_message_or_cq.from_user.id # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    
    text_to_show = "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–Ω—Ç–∏-—Å–ø–∞–º –ü—É—Å—Ç—ã—à–∫–æ–π:</b>\n\n"
    current_text_value = "<code>–¢–µ–∫—Å—Ç –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω.</code>" # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    current_photo_id_value = None
    photo_status_text = "–§–æ—Ç–æ/–í–∏–¥–µ–æ: <i>–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</i>"

    async with AsyncSessionFactory() as session, session.begin():
        db_text_val = await get_bot_setting(session, "antispam_dummy_text")
        if db_text_val: current_text_value = f"<em>{db_text_val}</em>" # –ö—É—Ä—Å–∏–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        current_photo_id_value = await get_bot_setting(session, "antispam_dummy_photo_id")
        if current_photo_id_value: photo_status_text = "–§–æ—Ç–æ/–í–∏–¥–µ–æ: <b>–ï—Å—Ç—å</b>"

    text_to_show += f"<u>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</u>\n{current_text_value}\n\n"
    text_to_show += f"{photo_status_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    kb = get_antispam_dummy_management_keyboard()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try: 
        message_had_photo = bool(message_to_act_on.photo)
        
        if isinstance(target_message_or_cq, CallbackQuery): # –ü—Ä–∏—à–µ–ª callback - –∑–Ω–∞—á–∏—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å
            if current_photo_id_value: # –ú—ã —Ö–æ—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ
                if message_had_photo: # –ò —É —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –±—ã–ª–æ —Ñ–æ—Ç–æ
                    await message_to_act_on.edit_caption(caption=text_to_show, reply_markup=kb, parse_mode="HTML")
                else: # –£ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ —Ñ–æ—Ç–æ, –∞ —Ç–µ–ø–µ—Ä—å —Ö–æ—Ç–∏–º —Å —Ñ–æ—Ç–æ
                    await message_to_act_on.delete()
                    await target_message_or_cq.bot.send_photo(chat_id=user_id, photo=current_photo_id_value, caption=text_to_show, reply_markup=kb, parse_mode="HTML")
            else: # –ú—ã —Ö–æ—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message_had_photo: # –ê —É —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–æ —Ñ–æ—Ç–æ
                    await message_to_act_on.delete()
                    await target_message_or_cq.bot.send_message(chat_id=user_id, text=text_to_show, reply_markup=kb, parse_mode="HTML")
                else: # –ò –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                    await message_to_act_on.edit_text(text_to_show, reply_markup=kb, parse_mode="HTML")
            await target_message_or_cq.answer()
        else: # –≠—Ç–æ Message, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if current_photo_id_value:
                await target_message_or_cq.answer_photo(photo=current_photo_id_value, caption=text_to_show, reply_markup=kb, parse_mode="HTML")
            else:
                await target_message_or_cq.answer(text_to_show, reply_markup=kb, parse_mode="HTML")

    except Exception as e:
        print(f"Error in show_antispam_dummy_config_menu (displaying): {e}\n{traceback.format_exc()}")
        # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_fallback_text = f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–°-–ø—É—Å—Ç—ã—à–∫–∏:\n–¢–µ–∫—Å—Ç: {await get_bot_setting(AsyncSessionFactory(), 'antispam_dummy_text') or '–Ω–µ –∑–∞–¥–∞–Ω'}\n–§–æ—Ç–æ: {'–µ—Å—Ç—å' if await get_bot_setting(AsyncSessionFactory(), 'antispam_dummy_photo_id') else '–Ω–µ—Ç'}"
        await message_to_act_on.answer(final_fallback_text, reply_markup=kb) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if isinstance(target_message_or_cq, CallbackQuery): await target_message_or_cq.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ.")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è Reply-–∫–Ω–æ–ø–∫–∏ "ü§ñ –ê–Ω—Ç–∏-—Å–ø–∞–º –ü—É—Å—Ç—ã—à–∫–∞"
@admin_router.message(F.text == "ü§ñ –ê–Ω—Ç–∏-—Å–ø–∞–º –ü—É—Å—Ç—ã—à–∫–∞", StateFilter(AdminStates.in_panel))
async def admin_manage_antispam_dummy_via_reply_button(message: Message, state: FSMContext):
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—É—Å—Ç—ã—à–∫–∏:", reply_markup=ReplyKeyboardRemove())
    # –ü–µ—Ä–µ–¥–∞–µ–º state, —Ç–∞–∫ –∫–∞–∫ show_antispam_dummy_config_menu –µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç (—Ö–æ—Ç—è –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ)
    await show_antispam_dummy_config_menu(message, state) 

# Callback "üîô –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é" –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—É—Å—Ç—ã—à–∫–æ–π
@admin_router.callback_query(F.data == "admin_as_back_to_main_panel_cb") # –î–æ–±–∞–≤–ª–µ–Ω StateFilter –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
async def admin_return_from_antispam_to_main_panel_cb(callback_query: CallbackQuery, state: FSMContext): # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ StateFilter –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ —É–±—Ä–∞—Ç—å –µ–≥–æ –ø–æ–∫–∞
    await state.set_state(AdminStates.in_panel) 
    try: 
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
        if callback_query.message.photo: await callback_query.message.delete() 
        else: await callback_query.message.edit_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    except Exception as e_del_back:
        print(f"Minor error trying to clean up message on back to admin panel: {e_del_back}")
    
    await callback_query.message.answer(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Reply-–º–µ–Ω—é
    await callback_query.answer()

# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¢–ï–ö–°–¢–ê –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—É—Å—Ç—ã—à–∫–∏ ---
@admin_router.callback_query(F.data == "admin_as_edit_text")
async def admin_ask_antispam_text(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.editing_antispam_dummy_text)
    prompt_message = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—É—Å—Ç—ã—à–∫–∏:"
    try:
        if callback_query.message.photo:
            await callback_query.message.delete()
            await callback_query.message.answer(prompt_message, reply_markup=cancel_field_edit_keyboard) # –ò—Å–ø–æ–ª—å–∑—É–µ–º Reply –∫–Ω–æ–ø–∫—É
        else:
            await callback_query.message.edit_text(prompt_message, reply_markup=None) # –£–±–∏—Ä–∞–µ–º inline
            await callback_query.message.answer("–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ:", reply_markup=cancel_field_edit_keyboard) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Reply –∫–Ω–æ–ø–∫—É
    except Exception as e:
        print(f"Error editing message to ask for antispam text: {e}")
        await callback_query.message.answer(prompt_message, reply_markup=cancel_field_edit_keyboard)
    await callback_query.answer()

@admin_router.message(AdminStates.editing_antispam_dummy_text, F.text)
async def admin_save_antispam_text(message: Message, state: FSMContext):
    new_text = message.text.strip()
    if not (10 <= len(new_text) <= 1000): # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        await message.answer("–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel_admin_action –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    async with AsyncSessionFactory() as session, session.begin():
        await update_bot_setting(session, "antispam_dummy_text", new_text)
    
    await message.answer("–¢–µ–∫—Å—Ç –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—É—Å—Ç—ã—à–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    # await state.set_state(AdminStates.in_panel) # –ò–ª–∏ None, –µ—Å–ª–∏ show_... –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await show_antispam_dummy_config_menu(message, state)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞)

async def admin_cancel_current_input_action(message: Message, state: FSMContext):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AdminStates.in_panel) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ (–æ—Ç–∫—É–¥–∞ –æ–±—ã—á–Ω–æ –∏–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—à–∫–∞–º–∏)
    await show_antispam_dummy_config_menu(message, state) # state —Ç–µ–ø–µ—Ä—å AdminStates.in_panel


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–û–¢–û/–í–ò–î–ï–û –¥–ª—è –ê–Ω—Ç–∏-—Å–ø–∞–º –ü—É—Å—Ç—ã—à–∫–∏ ---

# Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üñºÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"
@admin_router.callback_query(F.data == "admin_as_edit_photo", StateFilter(AdminStates.in_panel, None)) # –ú–æ–∂–Ω–æ AdminStates.in_panel –∏–ª–∏ –µ—Å–ª–∏ –º—ã –≤ –ø–æ–¥–º–µ–Ω—é
async def admin_ask_antispam_photo(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.editing_antispam_dummy_photo)
    prompt_message = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—É—Å—Ç—ã—à–∫–∏."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é cancel_field_edit_keyboard, —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # cancel_photo_keyboard = ReplyKeyboardMarkup(
    #     keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ")]],
    #     resize_keyboard=True, one_time_keyboard=True
    # )

    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è inline –∫–Ω–æ–ø–∫–∏
        if callback_query.message.photo or callback_query.message.video: # –ï—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å –º–µ–¥–∏–∞
            await callback_query.message.delete() # –ü—Ä–æ—â–µ —É–¥–∞–ª–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
            await callback_query.message.answer(prompt_message, reply_markup=cancel_field_edit_keyboard)
        else: # –ï—Å–ª–∏ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º
            await callback_query.message.edit_text(prompt_message, reply_markup=None) # –£–±–∏—Ä–∞–µ–º inline
            await callback_query.message.answer("–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ:", reply_markup=cancel_field_edit_keyboard) # –î–æ–±–∞–≤–ª—è–µ–º Reply –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    except Exception as e:
        print(f"Error editing message to ask for antispam photo: {e}")
        await callback_query.message.answer(prompt_message, reply_markup=cancel_field_edit_keyboard)
    await callback_query.answer()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ editing_antispam_dummy_photo)
@admin_router.message(AdminStates.editing_antispam_dummy_photo, F.photo | F.video) # –õ–æ–≤–∏–º –∏ —Ñ–æ—Ç–æ, –∏ –≤–∏–¥–µ–æ
async def admin_save_antispam_media(message: Message, state: FSMContext):
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    elif message.video:
        file_id = message.video.file_id
    
    if not file_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.", reply_markup=cancel_field_edit_keyboard)
        return

    async with AsyncSessionFactory() as session, session.begin():
        await update_bot_setting(session, "antispam_dummy_photo_id", file_id)
    
    await message.answer("–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—É—Å—Ç—ã—à–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove())
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∫–∞–∑—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É—Å—Ç—ã—à–∫–∏
    # await state.set_state(AdminStates.in_panel) # –ò–ª–∏ None, show_antispam_dummy_config_screen —Å–∞–º–∞ —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è
    await show_antispam_dummy_config_menu(message, state)

# –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ editing_antispam_dummy_photo –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ –º–µ–¥–∏–∞, –∞ —Ç–µ–∫—Å—Ç (–∫—Ä–æ–º–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã)
@admin_router.message(AdminStates.editing_antispam_dummy_photo, F.text)
async def admin_wrong_file_for_antispam_media(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ": # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ cancel_field_edit_keyboard
        return await admin_cancel_current_field_edit_by_button(message, state) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã

    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ'.",
        reply_markup=cancel_field_edit_keyboard # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    )

# Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ"
@admin_router.callback_query(F.data == "admin_as_delete_photo", StateFilter(AdminStates.in_panel, None)) # –ú–æ–∂–Ω–æ –∏–∑ in_panel –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É—Å—Ç—ã—à–∫–∏
async def admin_delete_antispam_media(callback_query: CallbackQuery, state: FSMContext):
    async with AsyncSessionFactory() as session, session.begin():
        await update_bot_setting(session, "antispam_dummy_photo_id", None) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ None
    
    await callback_query.answer("–§–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—É—Å—Ç—ã—à–∫–∏ —É–¥–∞–ª–µ–Ω–æ.")
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await show_antispam_dummy_config_menu(callback_query, state)


# --- –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú –û –ñ–ê–õ–û–ë–ê–• ---

async def notify_admins_about_complaint(bot: Bot, complaint: Complaint):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    
    reporter_display_info = f"ID: {complaint.reporter_user_id or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}"
    
    reported_entity_type_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç" 
    reported_user_details_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" 
    profile_details_snippet = "" 
    photo_to_send_for_admin = None
    target_user_for_action_buttons = complaint.reported_user_id

    try:
        async with AsyncSessionFactory() as session, session.begin():
            # 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –∂–∞–ª–æ–±—ã
            if complaint.reporter_user_id:
                reporter = await session.get(User, complaint.reporter_user_id)
                if reporter:
                    reporter_display_info = f"{reporter.first_name or ''} (@{reporter.username or 'N/A'}, ID: {reporter.telegram_id})"

            # 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–∏ –∂–∞–ª–æ–±—ã
            if complaint.reported_user_id:
                reported_user_obj = await session.get(User, complaint.reported_user_id)
                if reported_user_obj:
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ—Ç–æ–º —É—Ç–æ—á–Ω–∏–º, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å
                    reported_user_details_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {reported_user_obj.first_name or ''} (@{reported_user_obj.username or 'N/A'}, ID: {reported_user_obj.telegram_id})"
                else:
                    reported_user_details_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {complaint.reported_user_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ Users)"
            
            # –ï—Å–ª–∏ –∂–∞–ª–æ–±–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
            if complaint.reported_employer_profile_id:
                reported_entity_type_text = "–∞–Ω–∫–µ—Ç—É –†–ê–ë–û–¢–û–î–ê–¢–ï–õ–Ø"
                emp_profile = await session.get(EmployerProfile, complaint.reported_employer_profile_id)
                if emp_profile:
                    photo_to_send_for_admin = emp_profile.photo_file_id
                    # –£—Ç–æ—á–Ω—è–µ–º reported_user_details_text –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è
                    owner_id = emp_profile.user_id
                    if not target_user_for_action_buttons: target_user_for_action_buttons = owner_id # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                    
                    owner = await session.get(User, owner_id)
                    if owner: 
                        reported_user_details_text = f"–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å: {owner.first_name or ''} (@{owner.username or 'N/A'}, ID: {owner.telegram_id})"
                    
                    wf_display = getattr(emp_profile.work_format, 'name', "–ù–µ —É–∫–∞–∑–∞–Ω").title()
                    min_age_d = emp_profile.min_age_candidate if emp_profile.min_age_candidate is not None else "–ù–µ —É–∫–∞–∑–∞–Ω"
                    profile_details_snippet = (
                        f"\n\n<b>--- –î–µ—Ç–∞–ª–∏ –∞–Ω–∫–µ—Ç—ã (—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å ID: {emp_profile.id}) ---</b>\n"
                        f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {emp_profile.company_name}\n<b>–ì–æ—Ä–æ–¥:</b> {emp_profile.city}\n"
                        f"<b>–ü–æ–∑–∏—Ü–∏—è:</b> {emp_profile.position}\n<b>–ó–ü:</b> {emp_profile.salary}\n"
                        f"<b>–ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç:</b> {min_age_d}\n<b>–§–æ—Ä–º–∞—Ç:</b> {wf_display}\n"
                        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{emp_profile.description or '–ù–µ—Ç'}\n"
                        f"<b>–ê–∫—Ç–∏–≤–Ω–∞:</b> {'–î–∞' if emp_profile.is_active else '–ù–µ—Ç'}"
                    )
            # –ï—Å–ª–∏ –∂–∞–ª–æ–±–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
            elif complaint.reported_applicant_profile_id:
                reported_entity_type_text = "–∞–Ω–∫–µ—Ç—É –°–û–ò–°–ö–ê–¢–ï–õ–Ø"
                app_profile = await session.get(ApplicantProfile, complaint.reported_applicant_profile_id)
                if app_profile:
                    owner_id = app_profile.user_id
                    if not target_user_for_action_buttons: target_user_for_action_buttons = owner_id
                    
                    owner = await session.get(User, owner_id)
                    if owner: 
                        reported_user_details_text = f"–°–æ–∏—Å–∫–∞—Ç–µ–ª—å: {owner.first_name or ''} (@{owner.username or 'N/A'}, ID: {owner.telegram_id})"
                    
                    gender_d = getattr(app_profile.gender, 'name', "–ù–µ —É–∫–∞–∑–∞–Ω").title()
                    contact_phone_text = "–ù–µ —É–∫–∞–∑–∞–Ω"
                    if owner and owner.contact_phone: # –¢–µ–ª–µ—Ñ–æ–Ω –±–µ—Ä–µ–º –∏–∑ User
                        contact_phone_text = f"+{owner.contact_phone}"
                    
                    profile_details_snippet = (
                        f"\n\n<b>--- –î–µ—Ç–∞–ª–∏ –∞–Ω–∫–µ—Ç—ã (—Å–æ–∏—Å–∫–∞—Ç–µ–ª—å ID: {app_profile.id}) ---</b>\n"
                        f"<b>–ì–æ—Ä–æ–¥:</b> {app_profile.city}\n<b>–ü–æ–ª:</b> {gender_d}\n"
                        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {app_profile.age}\n<b>–û–ø—ã—Ç:</b>\n{app_profile.experience or '–ù–µ—Ç'}\n"
                        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {contact_phone_text}"
                    )
            # –ï—Å–ª–∏ –∂–∞–ª–æ–±–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ reported_user_details_text)
            elif complaint.reported_user_id and not complaint.reported_employer_profile_id and not complaint.reported_applicant_profile_id:
                 reported_entity_type_text = "–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è PUSH
        full_notification_text = (
            f"üö® –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞! (ID: {complaint.id})\n\n"
            f"<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b>\n{reporter_display_info}\n\n"
            f"<b>–ñ–∞–ª–æ–±–∞ –Ω–∞ {reported_entity_type_text}:</b>\n{reported_user_details_text}"
            f"{profile_details_snippet}" # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∫–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        )

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        action_buttons = []
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è/—Å–±—Ä–æ—Å–∞ –∞–Ω–∫–µ—Ç—ã
        if complaint.reported_employer_profile_id:
            action_buttons.append([InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Ä–∞–±-–ª—è (—Å–±—Ä–æ—Å)", 
                callback_data=f"admin_complaint_delete_reset_emp_profile:{complaint.id}:{complaint.reported_employer_profile_id}:{target_user_for_action_buttons or emp_profile.user_id}"
            )])
        elif complaint.reported_applicant_profile_id:
             action_buttons.append([InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å–æ–∏—Å–∫-–ª—è (—Å–±—Ä–æ—Å)", 
                callback_data=f"admin_complaint_delete_reset_app_profile:{complaint.id}:{complaint.reported_applicant_profile_id}:{target_user_for_action_buttons or app_profile.user_id}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_user_for_action_buttons:
            action_buttons.append([InlineKeyboardButton(
                text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                callback_data=f"admin_complaint_ban_user:{complaint.id}:{target_user_for_action_buttons}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é"
        action_buttons.append([InlineKeyboardButton(
            text="‚òëÔ∏è –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é", 
            callback_data=f"admin_complaint_resolve:{complaint.id}"
        )])
        
        admin_action_kb = InlineKeyboardMarkup(inline_keyboard=action_buttons)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º
        for admin_id_loop in ADMIN_IDS:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —ç—Ç–æ –∂–∞–ª–æ–±–∞ –Ω–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                if photo_to_send_for_admin and complaint.reported_employer_profile_id:
                    await bot.send_photo(
                        chat_id=admin_id_loop,
                        photo=photo_to_send_for_admin,
                        caption=full_notification_text[:1024], # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã caption
                        reply_markup=admin_action_kb,
                        parse_mode="HTML"
                    )
                else: # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö (–∂–∞–ª–æ–±–∞ –Ω–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –±–µ–∑ —Ñ–æ—Ç–æ) - —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.send_message(
                        chat_id=admin_id_loop,
                        text=full_notification_text,
                        reply_markup=admin_action_kb,
                        parse_mode="HTML"
                    )
                print(f"DEBUG: Complaint PUSH sent to admin {admin_id_loop} for complaint ID {complaint.id}")
            except Exception as e_send:
                print(f"ERROR sending PUSH to admin {admin_id_loop} for complaint {complaint.id}: {e_send}\n{traceback.format_exc()}")
    
    except Exception as e_outer:
        print(f"CRITICAL ERROR in notify_admins_about_complaint (complaint_id {complaint.id if complaint else 'Unknown'}): {e_outer}\n{traceback.format_exc()}")



@admin_router.callback_query(F.data.startswith("admin_complaint_resolve:"))
async def admin_resolve_complaint(callback_query: CallbackQuery, state: FSMContext):
    try:
        complaint_id = int(callback_query.data.split(":")[1])
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∂–∞–ª–æ–±—ã.", show_alert=True)
        return

    async with AsyncSessionFactory() as session, session.begin():
        complaint = await session.get(Complaint, complaint_id)
        if complaint:
            if complaint.status != ComplaintStatusEnum.NEW:
                await callback_query.answer("–≠—Ç–∞ –∂–∞–ª–æ–±–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
                # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±—Ä–∞–≤ –∫–Ω–æ–ø–∫–∏
                try: await callback_query.message.edit_reply_markup(reply_markup=None)
                except: pass
                return

            complaint.status = ComplaintStatusEnum.RESOLVED # –ò–ª–∏ VIEWED, –∞ –ø–æ—Ç–æ–º –∞–¥–º–∏–Ω –º–µ–Ω—è–µ—Ç –Ω–∞ RESOLVED
            complaint.updated_at = func.now() # SQLAlchemy –æ–±—ã—á–Ω–æ —Å–∞–º–∞ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç, –Ω–æ –¥–ª—è —è–≤–Ω–æ—Å—Ç–∏
            # session.add(complaint) # –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
            await callback_query.answer("–ñ–∞–ª–æ–±–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è.", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏)
            try:
                new_text = callback_query.message.text + "\n\n<b>–°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ‚úÖ</b>"
                await callback_query.message.edit_text(text=new_text, reply_markup=None, parse_mode="HTML")
            except Exception as e:
                print(f"Failed to edit admin complaint message after resolving: {e}")
        else:
            await callback_query.answer("–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@admin_router.callback_query(F.data.startswith("admin_complaint_ban_user:"))
async def admin_ban_user_from_complaint(callback_query: types.CallbackQuery, state: FSMContext):
    acting_admin_id = callback_query.from_user.id
    # ... (–ø–∞—Ä—Å–∏–Ω–≥ complaint_id –∏ user_to_ban_id –∏–∑ callback_query.data) ...
    try:
        parts = callback_query.data.split(":")
        complaint_id = int(parts[1])
        user_to_ban_id = int(parts[2])
    except (IndexError, ValueError): # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏) ...
        return

    action_taken_message = "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ."
    message_text_for_admin = callback_query.message.text or callback_query.message.caption or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∞–ª–æ–±–µ"

    async with AsyncSessionFactory() as session, session.begin():
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∂–∞–ª–æ–±—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        complaint_result = await session.execute(
            select(Complaint).where(Complaint.id == complaint_id).with_for_update() # FOR UPDATE –∑–¥–µ—Å—å
        )
        complaint = complaint_result.scalar_one_or_none()

        if not complaint:
            await callback_query.answer("–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True); return
        if complaint.status != ComplaintStatusEnum.NEW:
            await callback_query.answer(f"–ñ–∞–ª–æ–±–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {complaint.status.name}).", show_alert=True)
            # ... (–æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞)
            return

        # 2. –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_to_ban_obj = await session.get(User, user_to_ban_id) # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç User
        if user_to_ban_obj:
            if not user_to_ban_obj.is_banned:
                user_to_ban_obj.is_banned = True
                # session.add(user_to_ban_obj) # SQLAlchemy –æ—Ç—Å–ª–µ–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                action_taken_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_to_ban_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                print(f"DEBUG: Admin {acting_admin_id} BANNED User ID {user_to_ban_id}.")
            else:
                action_taken_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_to_ban_id} —É–∂–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                print(f"DEBUG: User ID {user_to_ban_id} was ALREADY BANNED (Admin: {acting_admin_id}).")
            
            complaint.status = ComplaintStatusEnum.RESOLVED # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã
            complaint.updated_at = func.now()
            # session.add(complaint) # SQLAlchemy –æ—Ç—Å–ª–µ–¥–∏—Ç
        else:
            action_taken_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_to_ban_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            print(f"ERROR: User ID {user_to_ban_id} to ban NOT FOUND by admin {acting_admin_id}.")
 

    await callback_query.answer(action_taken_message, show_alert=True)
    try: # –û–±–Ω–æ–≤–ª—è–µ–º PUSH-—Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
        new_text = message_text_for_admin + f"\n\n<b>–î–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞ {acting_admin_id}:</b> {action_taken_message}"
        if callback_query.message.photo: await callback_query.message.edit_caption(caption=new_text, reply_markup=None, parse_mode="HTML")
        else: await callback_query.message.edit_text(text=new_text, reply_markup=None, parse_mode="HTML")
    except Exception as e_edit:
        print(f"Failed to edit admin PUSH after ban action: {e_edit}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è"
@admin_router.callback_query(F.data.startswith("admin_complaint_delete_reset_"))
async def admin_delete_reset_profile_from_complaint(callback_query: types.CallbackQuery, state: FSMContext):
    acting_admin_id = callback_query.from_user.id
    action_performed_message = "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ." # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    new_text_for_admin_push = callback_query.message.text or callback_query.message.caption or "PUSH-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∂–∞–ª–æ–±–µ"

    try:
        parts = callback_query.data.split(":")
        action_prefix = parts[0]
        complaint_id = int(parts[1])
        profile_id_to_delete = int(parts[2])
        owner_user_id = int(parts[3])
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return

    profile_model_to_delete = None
    entity_name_for_logs = ""
    if action_prefix == "admin_complaint_delete_reset_emp_profile":
        profile_model_to_delete = EmployerProfile
        entity_name_for_logs = "—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è"
    elif action_prefix == "admin_complaint_delete_reset_app_profile":
        profile_model_to_delete = ApplicantProfile
        entity_name_for_logs = "—Å–æ–∏—Å–∫–∞—Ç–µ–ª—è"
    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    async with AsyncSessionFactory() as session, session.begin():
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∂–∞–ª–æ–±—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        complaint_select_stmt = select(Complaint).where(Complaint.id == complaint_id).with_for_update()
        complaint_obj = (await session.execute(complaint_select_stmt)).scalar_one_or_none()

        if not complaint_obj:
            await callback_query.answer("–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞).", show_alert=True)
            try: await callback_query.message.delete()
            except: pass
            return

        if complaint_obj.status != ComplaintStatusEnum.NEW:
            await callback_query.answer(f"–≠—Ç–∞ –∂–∞–ª–æ–±–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {complaint_obj.status.name}).", show_alert=True)
            new_text_for_admin_push += f"\n\n<b>–°—Ç–∞—Ç—É—Å: –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({complaint_obj.status.name}) –∞–¥–º–∏–Ω–æ–º</b>"
            try:
                if callback_query.message.photo: await callback_query.message.edit_caption(caption=new_text_for_admin_push, reply_markup=None, parse_mode="HTML")
                else: await callback_query.message.edit_text(text=new_text_for_admin_push, reply_markup=None, parse_mode="HTML")
            except: pass
            return

        # --- –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å NEW, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è ---
        profile_deleted = False
        role_reset = False

        # 2. –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        delete_profile_stmt = delete(profile_model_to_delete).where(profile_model_to_delete.id == profile_id_to_delete)
        profile_delete_result = await session.execute(delete_profile_stmt)
        if profile_delete_result.rowcount > 0:
            profile_deleted = True
            print(f"DEBUG: Admin {acting_admin_id} deleted {entity_name_for_logs} profile ID {profile_id_to_delete}")
        
        # 3. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role_update_stmt = update(User).where(User.telegram_id == owner_user_id).values(role=None)
        user_update_result = await session.execute(user_role_update_stmt)
        if user_update_result.rowcount > 0:
            role_reset = True
            print(f"DEBUG: Admin {acting_admin_id} reset role for User ID {owner_user_id}")

        # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã –Ω–∞ RESOLVED
        complaint_status_update_stmt = (
            update(Complaint)
            .where(Complaint.id == complaint_id) # –°—Ç–∞—Ç—É—Å —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, –º–æ–∂–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
            .values(status=ComplaintStatusEnum.RESOLVED, updated_at=func.now())
        )
        await session.execute(complaint_status_update_stmt)
        print(f"DEBUG: Complaint ID {complaint_id} status set to RESOLVED by admin {acting_admin_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if profile_deleted and role_reset:
            action_performed_message = f"–ê–Ω–∫–µ—Ç–∞ {entity_name_for_logs} (ID {profile_id_to_delete}) —É–¥–∞–ª–µ–Ω–∞, —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID {owner_user_id}) —Å–±—Ä–æ—à–µ–Ω–∞."
        # ... (–¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã action_performed_message)
        else:
            action_performed_message = f"–ñ–∞–ª–æ–±–∞ {complaint_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (–£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã/—Å–±—Ä–æ—Å —Ä–æ–ª–∏). –ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞: {'–î–∞' if profile_deleted else '–ù–µ—Ç/–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}. –†–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞: {'–î–∞' if role_reset else '–ù–µ—Ç/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}."
            
        new_text_for_admin_push += f"\n\n<b>–î–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞ {acting_admin_id}:</b> {action_performed_message}"
        # –ö–æ–º–º–∏—Ç –±—É–¥–µ—Ç –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ session.begin()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
    await callback_query.answer(action_performed_message, show_alert=True)
    try:
        if callback_query.message.photo:
            await callback_query.message.edit_caption(caption=new_text_for_admin_push, reply_markup=None, parse_mode="HTML")
        else:
            await callback_query.message.edit_text(text=new_text_for_admin_push, reply_markup=None, parse_mode="HTML")
    except Exception as e_edit_final:
        print(f"Failed to edit admin PUSH after delete/reset action: {e_edit_final}")


@admin_router.callback_query(F.data.startswith("admin_complaint_resolve:"))
async def admin_resolve_complaint_action(callback_query: types.CallbackQuery, state: FSMContext):
    acting_admin_id = callback_query.from_user.id
    try:
        complaint_id = int(callback_query.data.split(":")[1])
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∂–∞–ª–æ–±—ã.", show_alert=True)
        return

    async with AsyncSessionFactory() as session, session.begin():
        complaint = await session.get(Complaint, complaint_id)
        
        if not complaint:
            await callback_query.answer("–ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω–∞).", show_alert=True)
            try: await callback_query.message.delete() # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
            except: pass
            return

        if complaint.status != ComplaintStatusEnum.NEW:
            await callback_query.answer(f"–≠—Ç–∞ –∂–∞–ª–æ–±–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {complaint.status.name}).", show_alert=True)
            try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±—Ä–∞–≤ –∫–Ω–æ–ø–∫–∏
                new_text = callback_query.message.text + f"\n\n<b>–°—Ç–∞—Ç—É—Å: –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({complaint.status.name})</b>"
                await callback_query.message.edit_text(text=new_text, reply_markup=None, parse_mode="HTML")
            except Exception: # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º
                try: await callback_query.message.delete() 
                except: pass
            return

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å NEW, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        complaint.status = ComplaintStatusEnum.RESOLVED # –ò–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞—Ç—É—Å
        complaint.updated_at = func.now() 
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ 'processed_by_admin_id = acting_admin_id' –≤ –º–æ–¥–µ–ª—å Complaint
        # session.add(complaint) # –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
        
        await session.commit() # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∂–∞–ª–æ–±—ã
        print(f"DEBUG: Admin {acting_admin_id} resolved complaint ID {complaint_id}.")

    # –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –Ω–∞–∂–∞–≤—à–µ–≥–æ –∞–¥–º–∏–Ω–∞
    await callback_query.answer("–ñ–∞–ª–æ–±–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è.", show_alert=True)
    try:
        await callback_query.message.delete()
        print(f"DEBUG: Admin's PUSH message for resolved complaint {complaint_id} deleted for admin {acting_admin_id}.")
    except Exception as e_del_admin_msg:
        print(f"DEBUG: Could not delete admin's PUSH message {callback_query.message.message_id}: {e_del_admin_msg}")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ü—É—Å—Ç—ã—à–∫—É –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è"
@admin_router.callback_query(F.data == "admin_action_create_dummy")
async def admin_start_add_dummy_employer_cb(callback_query: CallbackQuery, state: FSMContext): # –ü–æ–∫–∞ –±–µ–∑ StateFilter
    await state.set_state(AdminAddDummyEmployer.waiting_for_city)
    
    # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        print(f"Could not edit reply markup for create_dummy: {e}")

    await callback_query.message.answer( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è (–ø—É—Å—Ç—ã—à–∫–∏).\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ –≤–≤–µ–¥–∏—Ç–µ /cancel_add_dummy\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —ç—Ç–æ–π –∞–Ω–∫–µ—Ç—ã:",
        reply_markup=ReplyKeyboardRemove() # –£–±–∏—Ä–∞–µ–º Reply –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    )
    await callback_query.answer()
    
    
# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç—ã—à–∫–∏
async def _cancel_dummy_creation(message: Message, state: FSMContext):
    await state.clear() # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ FSM –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç—ã—à–∫–∏
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç—ã—à–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ –ü–ï–†–ï–î –µ–≥–æ –ø–æ–∫–∞–∑–æ–º
    await state.set_state(AdminStates.in_panel) 
    await message.answer(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)

@admin_router.message(Command("cancel_add_dummy"), StateFilter(AdminAddDummyEmployer))
@admin_router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞", StateFilter(AdminAddDummyEmployer)) # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∞
async def admin_cancel_add_dummy_employer_command(message: Message, state: FSMContext):
    await _cancel_dummy_creation(message, state)

# –ì–æ—Ä–æ–¥
@admin_router.message(AdminAddDummyEmployer.waiting_for_city, F.text)
async def admin_dummy_emp_city_input(message: Message, state: FSMContext):
    city_parts = [part.capitalize() for part in message.text.strip().split()]
    new_city = " ".join(city_parts)
    if not (2 <= len(new_city) <= 100):
        await message.answer("–ì–æ—Ä–æ–¥: 2-100 —Å–∏–º–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel_add_dummy"); return
    await state.update_data(dummy_city=new_city)
    await state.set_state(AdminAddDummyEmployer.waiting_for_company_name)
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏/–ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—É—Å—Ç—ã—à–∫–∏:")

# –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
@admin_router.message(AdminAddDummyEmployer.waiting_for_company_name, F.text)
async def admin_dummy_emp_company_name_input(message: Message, state: FSMContext):
    name = message.text.strip()
    if not (2 <= len(name) <= 200):
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ: 2-200 —Å–∏–º–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel_add_dummy"); return
    await state.update_data(dummy_company_name=name)
    await state.set_state(AdminAddDummyEmployer.waiting_for_position)
    await message.answer("–ü–æ–∑–∏—Ü–∏—è –¥–ª—è –ø—É—Å—Ç—ã—à–∫–∏:")

# –ü–æ–∑–∏—Ü–∏—è
@admin_router.message(AdminAddDummyEmployer.waiting_for_position, F.text)
async def admin_dummy_emp_position_input(message: Message, state: FSMContext):
    position = message.text.strip()
    if not (3 <= len(position) <= 150):
        await message.answer("–ü–æ–∑–∏—Ü–∏—è: 3-150 —Å–∏–º–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel_add_dummy"); return
    await state.update_data(dummy_position=position)
    await state.set_state(AdminAddDummyEmployer.waiting_for_salary)
    await message.answer("–°—Ç–∞–≤–∫–∞/–ó–∞—Ä–ø–ª–∞—Ç–∞ (–ó–ü) –¥–ª—è –ø—É—Å—Ç—ã—à–∫–∏:")

# –ó–∞—Ä–ø–ª–∞—Ç–∞
@admin_router.message(AdminAddDummyEmployer.waiting_for_salary, F.text)
async def admin_dummy_emp_salary_input(message: Message, state: FSMContext):
    salary = message.text.strip()
    if not (3 <= len(salary) <= 100):
        await message.answer("–ó–ü: 3-100 —Å–∏–º–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel_add_dummy"); return
    await state.update_data(dummy_salary=salary)
    await state.set_state(AdminAddDummyEmployer.waiting_for_min_age)
    await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (—á–∏—Å–ª–æ–º, –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):")

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
@admin_router.message(AdminAddDummyEmployer.waiting_for_min_age, F.text)
async def admin_dummy_emp_min_age_input(message: Message, state: FSMContext):
    min_age_text = message.text.strip()
    new_min_age = None
    if min_age_text == "-" or min_age_text == "0": new_min_age = None 
    elif min_age_text.isdigit():
        age_val = int(min_age_text)
        if 16 <= age_val <= 70: new_min_age = age_val
        else: await message.answer("–í–æ–∑—Ä–∞—Å—Ç 16-70 –∏–ª–∏ '-'. –°–Ω–æ–≤–∞ –∏–ª–∏ /cancel_add_dummy"); return
    else: await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '-'. –°–Ω–æ–≤–∞ –∏–ª–∏ /cancel_add_dummy"); return
    await state.update_data(dummy_min_age=new_min_age)
    await state.set_state(AdminAddDummyEmployer.waiting_for_company_description)
    await message.answer("–ù–µ–±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –æ –∫–æ–º–ø–∞–Ω–∏–∏/–≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø—É—Å—Ç—ã—à–∫–∏:")

# –û–ø–∏—Å–∞–Ω–∏–µ
@admin_router.message(AdminAddDummyEmployer.waiting_for_company_description, F.text)
async def admin_dummy_emp_description_input(message: Message, state: FSMContext):
    desc = message.text.strip()
    if not (10 <= len(desc) <= 2000):
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ: 10-2000 —Å–∏–º–≤. –°–Ω–æ–≤–∞ –∏–ª–∏ /cancel_add_dummy"); return
    await state.update_data(dummy_description=desc)
    await state.set_state(AdminAddDummyEmployer.waiting_for_work_format)
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ñ–ª–∞–π–Ω"), KeyboardButton(text="–û–Ω–ª–∞–π–Ω")]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –¥–ª—è –ø—É—Å—Ç—ã—à–∫–∏ (–æ—Ñ–ª–∞–π–Ω/–æ–Ω–ª–∞–π–Ω):", reply_markup=kb)

# –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã
@admin_router.message(AdminAddDummyEmployer.waiting_for_work_format, F.text.in_({"–û—Ñ–ª–∞–π–Ω", "–û–Ω–ª–∞–π–Ω"}))
async def admin_dummy_emp_work_format_input(message: Message, state: FSMContext):
    await state.update_data(dummy_work_format_text=message.text)
    await state.set_state(AdminAddDummyEmployer.waiting_for_photo)
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ")]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—É—Å—Ç—ã—à–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'):", reply_markup=kb)

@admin_router.message(AdminAddDummyEmployer.waiting_for_work_format) # –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
async def admin_dummy_emp_work_format_invalid(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ '–û—Ñ–ª–∞–π–Ω' –∏–ª–∏ '–û–Ω–ª–∞–π–Ω'.")

# –§–æ—Ç–æ
@admin_router.message(AdminAddDummyEmployer.waiting_for_photo, F.photo)
async def admin_dummy_emp_photo_set(message: Message, state: FSMContext):
    await state.update_data(dummy_photo_file_id=message.photo[-1].file_id)
    await message.answer("–§–æ—Ç–æ –¥–ª—è –ø—É—Å—Ç—ã—à–∫–∏ –ø—Ä–∏–Ω—è—Ç–æ.")
    await _admin_show_dummy_confirmation_message(message, state)

@admin_router.message(AdminAddDummyEmployer.waiting_for_photo, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ")
async def admin_dummy_emp_photo_skip(message: Message, state: FSMContext):
    await state.update_data(dummy_photo_file_id=None)
    await message.answer("–§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await _admin_show_dummy_confirmation_message(message, state)

@admin_router.message(AdminAddDummyEmployer.waiting_for_photo) 
async def admin_dummy_emp_photo_invalid(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É—Å—Ç—ã—à–∫–∏
async def _admin_show_dummy_confirmation_message(message: Message, state: FSMContext):
    data = await state.get_data()
    photo_status = "–ï—Å—Ç—å" if data.get("dummy_photo_file_id") else "–ù–µ—Ç"
    text = (f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É—Å—Ç—ã—à–∫–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:\n\n"
            f"–ì–æ—Ä–æ–¥: {data.get('dummy_city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: {data.get('dummy_company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–ü–æ–∑–∏—Ü–∏—è: {data.get('dummy_position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–ó–ü: {data.get('dummy_salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç: {data.get('dummy_min_age', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('dummy_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–§–æ—Ä–º–∞—Ç: {data.get('dummy_work_format_text', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–§–æ—Ç–æ: {photo_status}\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –ø—É—Å—Ç—ã—à–∫—É?")
    
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—ã—à–∫—É")],
        [KeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")] 
    ], resize_keyboard=True, one_time_keyboard=True) # –°–¥–µ–ª–∞–µ–º one_time=True
    
    await state.set_state(AdminAddDummyEmployer.waiting_for_confirmation)
    
    photo_id_to_send = data.get("dummy_photo_file_id")
    if photo_id_to_send:
        await message.answer_photo(photo=photo_id_to_send, caption=text, reply_markup=kb, parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=kb, parse_mode="HTML")

# –•—ç–Ω–¥–ª–µ—Ä "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ" –Ω–∞ —à–∞–≥–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@admin_router.message(AdminAddDummyEmployer.waiting_for_confirmation, F.text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")
async def admin_dummy_cancel_at_confirmation(message: Message, state: FSMContext):
    await state.clear() # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ FSM –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç—ã—à–∫–∏
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç—ã—à–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ –ü–ï–†–ï–î –µ–≥–æ –ø–æ–∫–∞–∑–æ–º
    await state.set_state(AdminStates.in_panel) 
    await message.answer(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—à–∫–∏
@admin_router.message(AdminAddDummyEmployer.waiting_for_confirmation, F.text == "‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—ã—à–∫—É")
async def admin_dummy_emp_save_action(message: Message, state: FSMContext):
    data = await state.get_data()
    work_format_map = {"–û—Ñ–ª–∞–π–Ω": WorkFormatEnum.OFFLINE, "–û–Ω–ª–∞–π–Ω": WorkFormatEnum.ONLINE}

    async with AsyncSessionFactory() as session, session.begin():
        new_dummy_profile = EmployerProfile(
            user_id=None, # –Ø–≤–Ω–æ —Å—Ç–∞–≤–∏–º None, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç
            company_name=data.get('dummy_company_name'),
            city=data.get('dummy_city'),
            position=data.get('dummy_position'),
            salary=data.get('dummy_salary'),
            min_age_candidate=data.get('dummy_min_age'),
            description=data.get('dummy_description'),
            work_format=work_format_map.get(data.get('dummy_work_format_text')),
            photo_file_id=data.get('dummy_photo_file_id'),
            is_active=True, 
            is_dummy=True,  # –ì–ª–∞–≤–Ω—ã–π —Ñ–ª–∞–≥
            
        )
        session.add(new_dummy_profile)
    
    await message.answer("–ü—É—Å—Ç—ã—à–∫–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=ReplyKeyboardRemove())
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç—ã—à–∫–∏
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ –ü–ï–†–ï–î –µ–≥–æ –ø–æ–∫–∞–∑–æ–º
    await state.set_state(AdminStates.in_panel) 
    await message.answer(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)


@admin_router.message(F.text == "üìù –ü—É—Å—Ç—ã—à–∫–∏ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π", StateFilter(AdminStates.in_panel))
async def admin_manage_dummy_profiles_menu(message: Message, state: FSMContext):
    # –£–±–∏—Ä–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—à–∫–∞–º–∏ (—Ñ–µ–π–∫–æ–≤—ã–º–∏ –∞–Ω–∫–µ—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è):", 
        reply_markup=ReplyKeyboardRemove()
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Inline-–º–µ–Ω—é –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—É—Å—Ç—ã—à–∫–∞–º–∏
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_manage_dummy_profiles_keyboard()
    )

@admin_router.callback_query(F.data == "admin_back_to_main_from_dummies")

async def admin_back_to_main_panel_from_dummies_cb(callback_query: CallbackQuery, state: FSMContext): # –ü–æ–∫–∞ –±–µ–∑ StateFilter
    await state.set_state(AdminStates.in_panel) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∫–∏
    try: 
        await callback_query.message.edit_text(ADMIN_GREETING, reply_markup=None) # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Reply-–º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:",reply_markup=admin_main_menu_keyboard)
    except Exception as e_edit_back:
        print(f"Error editing message on back to admin panel from dummies: {e_edit_back}")
        # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ —à–ª–µ–º –Ω–æ–≤–æ–µ —Å Reply-–º–µ–Ω—é
        await callback_query.message.answer(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)
    await callback_query.answer()
    
    
async def build_dummy_list_keyboard(dummies: list[EmployerProfile], current_page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    buttons = []
    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è - –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —á–∞—Å—Ç—å —Å–ø–∏—Å–∫–∞)
    start_index = current_page * per_page
    end_index = start_index + per_page
    
    for dummy in dummies[start_index:end_index]:
        # –î–ª—è –∫–∞–∂–¥–æ–π –ø—É—Å—Ç—ã—à–∫–∏ —Å–≤–æ—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        buttons.append([
            InlineKeyboardButton(text=f"{dummy.id}: {dummy.company_name[:20]} ({dummy.city[:15]})", 
                                 callback_data=f"{DUMMY_PROFILE_CALLBACK_PREFIX}view:{dummy.id}"),
            #InlineKeyboardButton(text="‚úèÔ∏è", callback_data=f"{DUMMY_PROFILE_CALLBACK_PREFIX}edit_start:{dummy.id}"), # TODO
            InlineKeyboardButton(text="üóëÔ∏è", callback_data=f"{DUMMY_PROFILE_CALLBACK_PREFIX}delete_confirm:{dummy.id}")
        ])
    
            
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ (–≤ –º–µ–Ω—é –ø—É—Å—Ç—ã—à–µ–∫)", callback_data="admin_back_to_dummy_menu_from_list")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@admin_router.callback_query(F.data == "admin_action_list_dummies")
async def admin_list_dummy_profiles(callback_query: CallbackQuery, state: FSMContext):
    async with AsyncSessionFactory() as session, session.begin():
        dummies_result = await session.execute(
            select(EmployerProfile).where(EmployerProfile.is_dummy == True).order_by(EmployerProfile.id)
        )
        all_dummies = dummies_result.scalars().all()

    if not all_dummies:
        await callback_query.message.edit_text(
            "–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç—ã—à–µ–∫ –ø—É—Å—Ç. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.",
            reply_markup=get_manage_dummy_profiles_keyboard() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å", "–°–ø–∏—Å–æ–∫", "–ù–∞–∑–∞–¥"
        )
        await callback_query.answer()
        return

    # –ü–æ–∫–∞ –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ N (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5)
    keyboard = await build_dummy_list_keyboard(all_dummies, 0, 5) 
    try:
        await callback_query.message.edit_text(
            f"–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç—ã—à–µ–∫ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π (ID: –ö–æ–º–ø–∞–Ω–∏—è (–ì–æ—Ä–æ–¥)):\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.",
            reply_markup=keyboard
        )
    except Exception as e: # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ)
        print(f"Error editing message for dummy list: {e}")
        await callback_query.message.delete() # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
        await callback_query.message.answer(
             f"–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç—ã—à–µ–∫ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π (ID: –ö–æ–º–ø–∞–Ω–∏—è (–ì–æ—Ä–æ–¥)):\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.",
            reply_markup=keyboard
        )
    await callback_query.answer()


# Callback "–ù–∞–∑–∞–¥ (–≤ –º–µ–Ω—é –ø—É—Å—Ç—ã—à–µ–∫)" –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É—Å—Ç—ã—à–µ–∫
@admin_router.callback_query(F.data == "admin_back_to_dummy_menu_from_list")
async def admin_back_to_dummy_menu(callback_query: CallbackQuery, state: FSMContext):

    await callback_query.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—à–∫–∞–º–∏ (—Ñ–µ–π–∫–æ–≤—ã–º–∏ –∞–Ω–∫–µ—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è):\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_manage_dummy_profiles_keyboard()
    )
    await callback_query.answer()

# --- –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—É—Å—Ç—ã—à–∫–æ–π ---



# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç—ã—à–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞ - –∑–∞–ø—É—Å–∫ FSM —Å–æ–∑–¥–∞–Ω–∏—è)
@admin_router.callback_query(F.data.startswith(f"{DUMMY_PROFILE_CALLBACK_PREFIX}edit_start:"))
async def admin_edit_dummy_profile_start(callback_query: CallbackQuery, state: FSMContext):
    profile_id = int(callback_query.data.split(":")[-1])

    await callback_query.answer(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç—ã—à–∫–∏ ID {profile_id} (TODO). –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.", show_alert=True)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—à–∫–∏
@admin_router.callback_query(F.data.startswith(f"{DUMMY_PROFILE_CALLBACK_PREFIX}delete_confirm:"))
async def admin_dummy_delete_confirm(callback_query: CallbackQuery, state: FSMContext):
    profile_id = int(callback_query.data.split(":")[-1])
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"{DUMMY_PROFILE_CALLBACK_PREFIX}delete_do:{profile_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"{DUMMY_PROFILE_CALLBACK_PREFIX}delete_cancel:{profile_id}")
        ]
    ])
    await callback_query.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã—à–∫—É ID {profile_id}?", reply_markup=confirm_kb)
    await callback_query.answer()

# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@admin_router.callback_query(F.data.startswith(f"{DUMMY_PROFILE_CALLBACK_PREFIX}delete_cancel:"))
async def admin_dummy_delete_cancel(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ '–°–ø–∏—Å–æ–∫/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç—ã—à–µ–∫', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫.", reply_markup=get_manage_dummy_profiles_keyboard())


# –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—à–∫–∏
@admin_router.callback_query(F.data.startswith(f"{DUMMY_PROFILE_CALLBACK_PREFIX}delete_do:"))
async def admin_dummy_delete_do(callback_query: CallbackQuery, state: FSMContext):
    profile_id = int(callback_query.data.split(":")[-1])
    deleted_count = 0
    async with AsyncSessionFactory() as session, session.begin():
        result = await session.execute(
            delete(EmployerProfile).where(EmployerProfile.id == profile_id, EmployerProfile.is_dummy == True)
        )
        deleted_count = result.rowcount # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    
    if deleted_count > 0:
        await callback_query.answer(f"–ü—É—Å—Ç—ã—à–∫–∞ ID {profile_id} —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
    else:
        await callback_query.answer(f"–ü—É—Å—Ç—ã—à–∫–∞ ID {profile_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)

    await callback_query.message.edit_text(
        f"–î–µ–π—Å—Ç–≤–∏–µ —Å –ø—É—Å—Ç—ã—à–∫–æ–π ID {profile_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ '–°–ø–∏—Å–æ–∫/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...', —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫.", 
        reply_markup=get_manage_dummy_profiles_keyboard()
    )


@admin_router.callback_query(F.data.startswith(f"{DUMMY_PROFILE_CALLBACK_PREFIX}view:"))
async def admin_view_full_dummy_profile(callback_query: CallbackQuery, state: FSMContext):
    try:
        profile_id = int(callback_query.data.split(":")[-1])
        print(f"DEBUG admin_view_full_dummy_profile: Attempting to view profile ID {profile_id}")
    except (ValueError, IndexError):
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ—Ñ–∏–ª—è.", show_alert=True)
        return

    dummy_profile_instance = None # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    async with AsyncSessionFactory() as session, session.begin():
        dummy_profile_instance = await session.get(EmployerProfile, profile_id)

    if dummy_profile_instance and dummy_profile_instance.is_dummy:
        print(f"DEBUG admin_view_full_dummy_profile: Profile ID {profile_id} found and is a dummy.")
        await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É

        profile_text_for_admin = format_employer_profile_for_applicant(dummy_profile_instance)
        admin_info = f"üëÅÔ∏è‚Äçüó®Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ü—É—Å—Ç—ã—à–∫–∏ (ID: {dummy_profile_instance.id}, UserID: {dummy_profile_instance.user_id or 'N/A'})\n"
        admin_info += "------------------------------------\n"
        full_text_to_send = admin_info + profile_text_for_admin

        back_to_list_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø—É—Å—Ç—ã—à–µ–∫", callback_data="admin_action_list_dummies_from_view")]
        ])

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–æ —Å–ø–∏—Å–∫–æ–º), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            await callback_query.message.delete() 
            print(f"DEBUG admin_view_full_dummy_profile: Deleted previous message (ID: {callback_query.message.message_id})")
        except Exception as e_del:
            print(f"DEBUG admin_view_full_dummy_profile: Could not delete previous message: {e_del}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∞–Ω–∫–µ—Ç–æ–π –ø—É—Å—Ç—ã—à–∫–∏
        try:
            if dummy_profile_instance.photo_file_id:
                print(f"DEBUG admin_view_full_dummy_profile: Sending photo {dummy_profile_instance.photo_file_id}")
                await callback_query.bot.send_photo( # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot –∏–∑ callback_query
                    chat_id=callback_query.message.chat.id, # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
                    photo=dummy_profile_instance.photo_file_id,
                    caption=full_text_to_send[:1024], # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã caption
                    parse_mode="HTML",
                    reply_markup=back_to_list_kb
                )
            else:
                print("DEBUG admin_view_full_dummy_profile: Sending text only")
                await callback_query.message.answer( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                    full_text_to_send, 
                    parse_mode="HTML", 
                    reply_markup=back_to_list_kb
                )
            print(f"DEBUG admin_view_full_dummy_profile: Profile {profile_id} displayed.")
        except Exception as e_send:
            print(f"CRITICAL ERROR admin_view_full_dummy_profile: Could not send profile display: {e_send}")
            traceback.print_exc() # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–±–µ–∫–∞
            await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É –ø—É—Å—Ç—ã—à–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫.")
            # –í —Å–ª—É—á–∞–µ —Ç–∞–∫–æ–π –æ—à–∏–±–∫–∏, callback_query.answer() —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω.
            
    else:
        if dummy_profile_instance:
            print(f"DEBUG admin_view_full_dummy_profile: Profile ID {profile_id} found, but IS NOT a dummy.")
            await callback_query.answer("–≠—Ç–æ –Ω–µ –∞–Ω–∫–µ—Ç–∞-–ø—É—Å—Ç—ã—à–∫–∞.", show_alert=True)
        else:
            print(f"DEBUG admin_view_full_dummy_profile: Profile ID {profile_id} NOT found.")
            await callback_query.answer("–ü—É—Å—Ç—ã—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

        async with AsyncSessionFactory() as session, session.begin():
            dummies_result = await session.execute(select(EmployerProfile).where(EmployerProfile.is_dummy == True).order_by(EmployerProfile.id))
            all_dummies = dummies_result.scalars().all()
        keyboard_for_list = await build_dummy_list_keyboard(all_dummies, 0, 5)
        try:
            await callback_query.message.edit_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç—ã—à–µ–∫:", reply_markup=keyboard_for_list)
        except: # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ
             await callback_query.message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç—ã—à–µ–∫:", reply_markup=keyboard_for_list)

@admin_router.callback_query(F.data == "admin_action_list_dummies_from_view")
async def admin_back_to_dummy_list_from_view(callback_query: CallbackQuery, state: FSMContext):
    
    await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ç–µ–∫—É—â–∏–π callback
    
    
    # –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ø–∏—Å–æ–∫:
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—É—Å—Ç—ã—à–∫–∏
    async with AsyncSessionFactory() as session, session.begin():
        dummies_result = await session.execute(
            select(EmployerProfile).where(EmployerProfile.is_dummy == True).order_by(EmployerProfile.id)
        )
        all_dummies = dummies_result.scalars().all()

    if not all_dummies:
        new_text = "–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç—ã—à–µ–∫ –ø—É—Å—Ç."
        new_kb = get_manage_dummy_profiles_keyboard() # –ö–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å", "–°–ø–∏—Å–æ–∫ (TODO)", "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"
    else:
        new_text = f"–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç—ã—à–µ–∫ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π (ID: –ö–æ–º–ø–∞–Ω–∏—è (–ì–æ—Ä–æ–¥)):\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π."
        new_kb = await build_dummy_list_keyboard(all_dummies, 0, 5)

    try:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –ø—Ä–∏—à–ª–∏, –∏–º–µ–ª–æ —Ñ–æ—Ç–æ, –µ–≥–æ –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç
        if callback_query.message.photo:
            await callback_query.message.delete()
            await callback_query.message.answer(new_text, reply_markup=new_kb)
        else:
            await callback_query.message.edit_text(new_text, reply_markup=new_kb)
    except Exception as e:
        print(f"Error returning to dummy list from view: {e}")
        await callback_query.message.answer(new_text, reply_markup=new_kb) # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


async def build_real_employer_list_keyboard(
    profiles: list[EmployerProfile], 
    current_page: int = 0, 
    per_page: int = 3 # –î–∞–≤–∞–π—Ç–µ –ø–æ 3 –¥–ª—è —Ç–µ—Å—Ç–∞, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 5-7
) -> InlineKeyboardMarkup:
    buttons = []
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_items = len(profiles)
    total_pages = (total_items + per_page - 1) // per_page # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = current_page * per_page
    end_index = start_index + per_page
    
    paginated_profiles = profiles[start_index:end_index]

    if not paginated_profiles and current_page > 0: # –ï—Å–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—É—Å—Ç–æ, –∞ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
        current_page -=1 # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é
        start_index = current_page * per_page
        end_index = start_index + per_page
        paginated_profiles = profiles[start_index:end_index]

    for profile in paginated_profiles:
        status_emoji = "üü¢" if profile.is_active else "üî¥"
        ban_status_owner_text = ""
        # –ü—Ä–æ–≤–µ—Ä–∫—É –±–∞–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å,
        # –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∑–¥–µ—Å—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –º–Ω–æ–≥–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π)
        async with AsyncSessionFactory() as session:
            owner = await session.get(User, profile.user_id) if profile.user_id else None
            if owner and owner.is_banned:
                ban_status_owner_text = " (üö´–í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–±–∞–Ω–µ–Ω)"
        
        buttons.append([
            InlineKeyboardButton(
                text=f"{status_emoji} ID:{profile.id} {profile.company_name[:15]}{ban_status_owner_text}", 
                callback_data=f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}view:{profile.id}" # –û—Å—Ç–∞–≤–ª—è–µ–º ID –ø—Ä–æ—Ñ–∏–ª—è
            )
        ])
        buttons.append([
            InlineKeyboardButton(text="üëÅÔ∏è–ü–æ–¥—Ä–æ–±–Ω–æ", callback_data=f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}view:{profile.id}"),
            InlineKeyboardButton(text="üö´–î–µ–∞–∫—Ç." if profile.is_active else "üü¢–ê–∫—Ç–∏–≤.", callback_data=f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}toggle_active:{profile.id}:{current_page}"), # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            InlineKeyboardButton(text="üõ°Ô∏è–ë–∞–Ω –≤–ª.", callback_data=f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}ban_owner:{profile.id}:{profile.user_id}:{current_page}") # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        ])
        buttons.append([ # –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
            InlineKeyboardButton(
                text="üóëÔ∏è–£–¥–∞–ª–∏—Ç—å (–°–±—Ä–æ—Å)", 
                callback_data=f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}delete_reset_confirm:{profile.id}:{profile.user_id}:{current_page}"
            ) # –ü–µ—Ä–µ–¥–∞–µ–º profile.id, profile.user_id (–¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–æ–ª–∏) –∏ current_page
        ])
        buttons.append([InlineKeyboardButton(text="-"*20, callback_data="no_action")])


    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []
    if current_page > 0:
        pagination_row.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"{REAL_EMP_LIST_PAGE_CALLBACK_PREFIX}{current_page-1}"))
    
    if total_pages > 1: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        pagination_row.append(InlineKeyboardButton(text=f"üìÑ {current_page+1}/{total_pages}", callback_data="no_action_page_info"))

    if end_index < total_items:
        pagination_row.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"{REAL_EMP_LIST_PAGE_CALLBACK_PREFIX}{current_page+1}"))
    
    if pagination_row:
        buttons.append(pagination_row)
            
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_back_to_main_from_real_list")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@admin_router.callback_query(F.data.startswith(f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}delete_reset_confirm:"))
async def admin_confirm_delete_real_employer_profile(callback_query: CallbackQuery, state: FSMContext):
    try:
        parts = callback_query.data.split(":")
        profile_id_to_delete = int(parts[1])
        # owner_user_id = int(parts[2]) # –ú—ã –µ–≥–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –∫–Ω–æ–ø–∫—É delete_do
        # current_page = int(parts[3])  # –ò —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–∂–µ
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å", 
                                 callback_data=f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}delete_reset_do:{callback_query.data[len(REAL_EMP_PROFILE_CALLBACK_PREFIX+'delete_reset_confirm:'):]}"), # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ ID –¥–∞–ª—å—à–µ
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", 
                                 callback_data=f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}delete_reset_cancel:{profile_id_to_delete}:{parts[2]}:{parts[3]}") # –ü–µ—Ä–µ–¥–∞–µ–º ID –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        ]
    ])
    await callback_query.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è ID {profile_id_to_delete} –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å –µ–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞?", 
        reply_markup=confirm_kb
    )
    await callback_query.answer()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –†–ï–ê–õ–¨–ù–û–ô –∞–Ω–∫–µ—Ç—ã
@admin_router.callback_query(F.data.startswith(f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}delete_reset_cancel:"))
async def admin_cancel_delete_real_employer_profile(callback_query: CallbackQuery, state: FSMContext):
    try:
        parts = callback_query.data.split(":")
        # profile_id = int(parts[1]) # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –≤ callback_data
        # owner_user_id = int(parts[2])
        current_page = int(parts[3])
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–º–µ–Ω—ã.", show_alert=True)
        return # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º

    await callback_query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–Ω–∫–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    await show_real_employer_profiles_page(callback_query, state, page=current_page)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –†–ï–ê–õ–¨–ù–û–ô –∞–Ω–∫–µ—Ç—ã –∏ —Å–±—Ä–æ—Å–∞ —Ä–æ–ª–∏
@admin_router.callback_query(F.data.startswith(f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}delete_reset_do:"))
async def admin_do_delete_real_employer_profile(callback_query: CallbackQuery, state: FSMContext):
    try:
        parts = callback_query.data.split(":")
        profile_id_to_delete = int(parts[1])
        owner_user_id = int(parts[2])
        current_page_to_return_to = int(parts[3])
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return

    profile_deleted = False
    role_reset = False

    async with AsyncSessionFactory() as session, session.begin():
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
        target_profile = await session.get(EmployerProfile, profile_id_to_delete)
        if target_profile and not target_profile.is_dummy: # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç—ã—à–∫–∞
            await session.delete(target_profile)
            profile_deleted = True
            print(f"DEBUG: Admin {callback_query.from_user.id} deleted REAL EmployerProfile ID {profile_id_to_delete}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if owner_user_id: # –ï—Å–ª–∏ owner_user_id –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
            user_to_update = await session.get(User, owner_user_id)
            if user_to_update:
                user_to_update.role = None
                role_reset = True
                print(f"DEBUG: Admin {callback_query.from_user.id} reset role for User ID {owner_user_id}")
    
    action_message = "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ."
    if profile_deleted and role_reset:
        action_message = f"–ê–Ω–∫–µ—Ç–∞ ID {profile_id_to_delete} —É–¥–∞–ª–µ–Ω–∞, —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {owner_user_id} —Å–±—Ä–æ—à–µ–Ω–∞."
    elif profile_deleted:
        action_message = f"–ê–Ω–∫–µ—Ç–∞ ID {profile_id_to_delete} —É–¥–∞–ª–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    elif role_reset: # –ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —É–¥–∞–ª–µ–Ω
        action_message = f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {owner_user_id} —Å–±—Ä–æ—à–µ–Ω–∞, –Ω–æ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞/–Ω–∞–π–¥–µ–Ω–∞."
    else:
        action_message = f"–ê–Ω–∫–µ—Ç–∞ ID {profile_id_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ –ø—É—Å—Ç—ã—à–∫–∞."

    await callback_query.answer(action_message, show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_real_employer_profiles_page(callback_query, state, page=current_page_to_return_to)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è Reply-–∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä/–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ê–Ω–∫–µ—Ç –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π"
@admin_router.message(F.text == "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä/–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ê–Ω–∫–µ—Ç –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π", StateFilter(AdminStates.in_panel))
async def admin_list_real_employer_profiles_entry(message: Message, state: FSMContext): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    await message.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç...", reply_markup=ReplyKeyboardRemove())
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–ø–µ—Ä—å —É–º–µ–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_real_employer_profiles_page(message, state, page=0)

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ (—á—Ç–æ–±—ã –µ–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑–≤–∞—Ç—å –∏ –∏–∑ callback)
async def show_real_employer_profiles_page(target_message_or_cq: Message | CallbackQuery, state: FSMContext, page: int = 0):
    message_to_act_on = target_message_or_cq.message if isinstance(target_message_or_cq, CallbackQuery) else target_message_or_cq
    per_page = 3 # –°–∫–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    async with AsyncSessionFactory() as session, session.begin():
        profiles_result = await session.execute(
            select(EmployerProfile).where(EmployerProfile.is_dummy == False).order_by(EmployerProfile.id.desc())
        )
        all_real_profiles = profiles_result.scalars().all()

    if not all_real_profiles:
        text_to_send = "–í —Å–∏—Å—Ç–µ–º–µ –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π."
        # –ï—Å–ª–∏ —ç—Ç–æ callback, –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(target_message_or_cq, CallbackQuery):
            try: await message_to_act_on.edit_text(text_to_send, reply_markup=get_manage_dummy_profiles_keyboard()) # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—É—Å—Ç—ã—à–µ–∫ –∏–ª–∏ –∞–¥–º–∏–Ω–∫–∏
            except: await message_to_act_on.answer(text_to_send, reply_markup=admin_main_menu_keyboard) # –§–æ–ª–ª–±—ç–∫
            await target_message_or_cq.answer()
        else: # –ï—Å–ª–∏ —ç—Ç–æ Message
            await message_to_act_on.answer(text_to_send, reply_markup=admin_main_menu_keyboard)
        return

    keyboard = await build_real_employer_list_keyboard(all_real_profiles, current_page=page, per_page=per_page)
    list_text = f"–ê–Ω–∫–µ—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π (–°—Ç—Ä. {page+1}):"
    
    try:
        if isinstance(target_message_or_cq, CallbackQuery):
            await message_to_act_on.edit_text(list_text, reply_markup=keyboard)
            await target_message_or_cq.answer()
        else: # Message
            await message_to_act_on.answer(list_text, reply_markup=keyboard)
    except Exception as e:
        print(f"Error displaying real_employer_profiles page {page}: {e}")
        await message_to_act_on.answer(list_text, reply_markup=keyboard) # –§–æ–ª–ª–±—ç–∫)
        

@admin_router.callback_query(F.data.startswith(REAL_EMP_LIST_PAGE_CALLBACK_PREFIX))
async def admin_paginate_real_employer_list(callback_query: CallbackQuery, state: FSMContext):
    try:
        page = int(callback_query.data[len(REAL_EMP_LIST_PAGE_CALLBACK_PREFIX):])
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True)
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await show_real_employer_profiles_page(callback_query, state, page=page)
    # callback_query.answer() —É–∂–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –≤–Ω—É—Ç—Ä–∏ show_real_employer_profiles_page        


# Callback "–ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é" –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–Ω–∫–µ—Ç
@admin_router.callback_query(F.data == "admin_back_to_main_from_real_list")
async def admin_back_to_main_from_real_list_cb(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.in_panel)
    try: 
        await callback_query.message.delete() # –£–¥–∞–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    except: pass
    await callback_query.message.answer(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)
    await callback_query.answer()
    

@admin_router.callback_query(F.data == "no_action")
async def no_action_callback(callback_query: CallbackQuery):
    await callback_query.answer() # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—è

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–Ω–æ–π –∞–Ω–∫–µ—Ç—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
@admin_router.callback_query(F.data.startswith(f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}view:"))
async def admin_view_real_employer_profile(callback_query: CallbackQuery, state: FSMContext):
    profile_id = int(callback_query.data.split(":")[-1])
    async with AsyncSessionFactory() as session, session.begin():
        profile = await session.get(EmployerProfile, profile_id)
    
    if profile and not profile.is_dummy:
        await callback_query.answer()

        wf_display = getattr(profile.work_format, 'name', "–ù–µ —É–∫–∞–∑–∞–Ω").title()
        min_age_d = profile.min_age_candidate if profile.min_age_candidate is not None else "–ù–µ —É–∫–∞–∑–∞–Ω"
        photo_i = "–ï—Å—Ç—å" if profile.photo_file_id else "–ù–µ—Ç"
        owner = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        async with AsyncSessionFactory() as session, session.begin(): # –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
            user_owner = await session.get(User, profile.user_id)
            if user_owner: owner = f"{user_owner.first_name or ''} (@{user_owner.username or 'N/A'}, ID: {user_owner.telegram_id})"

        profile_text = (
            f"<b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è ID: {profile.id}</b>\n"
            f"–í–ª–∞–¥–µ–ª–µ—Ü: {owner}\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: {profile.company_name}\n–ì–æ—Ä–æ–¥: {profile.city}\n"
            f"–ü–æ–∑–∏—Ü–∏—è: {profile.position}\n–ó–ü: {profile.salary}\n"
            f"–ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç: {min_age_d}\n–§–æ—Ä–º–∞—Ç: {wf_display}\n–§–æ—Ç–æ: {photo_i}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{profile.description}\n"
            f"–ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if profile.is_active else '–ù–µ—Ç'}\n–ó–∞–±–∞–Ω–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü: {'–î–∞' if user_owner and user_owner.is_banned else '–ù–µ—Ç'}"
        )
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –°–ü–ò–°–ö–£ –∞–Ω–∫–µ—Ç (–ø–æ—Ç—Ä–µ–±—É–µ—Ç –≤—ã–∑–æ–≤–∞ admin_list_real_employer_profiles_handler)
            # –≠—Ç–æ —Å–ª–æ–∂–Ω–æ, –ø—Ä–æ—â–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é –∏–ª–∏ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—à–∫–∞–º–∏
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É (–û–±–Ω–æ–≤–∏—Ç—å)", callback_data="admin_action_list_real_emp_profiles_nav")]
        ])
        
        try: await callback_query.message.delete()
        except: pass

        if profile.photo_file_id:
            await callback_query.message.answer_photo(profile.photo_file_id, caption=profile_text, reply_markup=back_kb, parse_mode="HTML")
        else:
            await callback_query.message.answer(profile_text, reply_markup=back_kb, parse_mode="HTML")
    else:
        await callback_query.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ –ø—É—Å—Ç—ã—à–∫–∞.", show_alert=True)

# Callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∞–Ω–∫–µ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–¥–Ω–æ–π)
@admin_router.callback_query(F.data == "admin_action_list_real_emp_profiles_nav")
async def admin_back_to_real_emp_list_from_view(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    try: await callback_query.message.delete()
    except: pass
    await callback_query.message.answer(
        "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é –∏ —Å–Ω–æ–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–ü—Ä–æ—Å–º–æ—Ç—Ä/–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ê–Ω–∫–µ—Ç –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π'.",
        reply_markup=admin_main_menu_keyboard # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–ø–∏—Å–∫–∞
    )
    await state.set_state(AdminStates.in_panel)


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–Ω–∫–µ—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
@admin_router.callback_query(F.data.startswith(f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}toggle_active:"))
async def admin_toggle_real_employer_profile_active(callback_query: CallbackQuery, state: FSMContext):
    parts = callback_query.data.split(":")
    profile_id = int(parts[1])
    current_page_after_action = int(parts[2]) # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    action_message = ""
    
    # ... (–ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è is_active, –∫–∞–∫ –±—ã–ª–∞) ...
    async with AsyncSessionFactory() as session, session.begin():
        profile = await session.get(EmployerProfile, profile_id)
        if profile and not profile.is_dummy:
            profile.is_active = not profile.is_active
            profile.updated_at = func.now()
            action_message = f"–°—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã ID {profile.id} –∏–∑–º–µ–Ω–µ–Ω."
            await callback_query.answer(action_message) # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        else: # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏)
            await callback_query.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True); return
            
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –¢–£ –ñ–ï –°–¢–†–ê–ù–ò–¶–£ –°–ü–ò–°–ö–ê
    await show_real_employer_profiles_page(callback_query, state, page=current_page_after_action)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.message(Command("cancel_admin_action"), StateFilter(AdminStates.find_user_id_input))
@admin_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è", StateFilter(AdminStates.find_user_id_input))
async def admin_cancel_find_user_input(message: Message, state: FSMContext):
    await state.set_state(AdminStates.in_panel) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    await message.answer("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=admin_main_menu_keyboard)

# –ë–∞–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–Ω–∫–µ—Ç—ã
@admin_router.callback_query(F.data.startswith(f"{REAL_EMP_PROFILE_CALLBACK_PREFIX}ban_owner:"))
async def admin_ban_real_employer_owner(callback_query: CallbackQuery, state: FSMContext):
    parts = callback_query.data.split(":")
    profile_id = int(parts[1]) # ID –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_to_ban_id = int(parts[2])
    action_message = ""

    async with AsyncSessionFactory() as session, session.begin():
        user = await session.get(User, user_to_ban_id)
        if user:
            user.is_banned = True
            # session.add(user)
            action_message = f"–í–ª–∞–¥–µ–ª–µ—Ü –∞–Ω–∫–µ—Ç—ã ID {profile_id} (User ID: {user_to_ban_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
            await callback_query.answer(action_message, show_alert=True)
        else:
            action_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_to_ban_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            await callback_query.answer(action_message, show_alert=True)
            
    await callback_query.message.edit_text(f"{callback_query.message.text}\n\n{action_message}\n(–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏)", reply_markup=callback_query.message.reply_markup)


@admin_router.message(F.text == "‚ÑπÔ∏è –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID", StateFilter(AdminStates.in_panel))
async def admin_find_user_start(message: Message, state: FSMContext):
    await state.set_state(AdminStates.find_user_id_input)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é cancel_field_edit_keyboard –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel_admin_action."
    )




# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∞–¥–º–∏–Ω–∞
@admin_router.message(AdminStates.find_user_id_input, F.text)
async def admin_process_find_user_id(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.",
                             reply_markup=cancel_field_edit_keyboard)
        return
    
    user_to_find_id = int(message.text)
    await state.update_data(found_user_id_for_actions=user_to_find_id) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    
    await message.answer(f"–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {user_to_find_id}...", reply_markup=ReplyKeyboardRemove())
    await show_found_user_details(message, state, user_to_find_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
async def show_found_user_details(target_message_or_cq: Message | CallbackQuery, state: FSMContext, user_id_to_show: int):
    message_to_act_on = target_message_or_cq.message if isinstance(target_message_or_cq, CallbackQuery) else target_message_or_cq
    
    user_info_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {user_id_to_show}\n\n"
    user_db_object: User | None = None # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ User
    app_profile_for_buttons: ApplicantProfile | None = None # –î–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
    emp_profile_for_buttons: EmployerProfile | None = None # –î–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è

    async with AsyncSessionFactory() as session, session.begin(): # –û–¥–∏–Ω session.begin –¥–ª—è –≤—Å–µ—Ö —á—Ç–µ–Ω–∏–π
        user_db_object = await session.get(User, user_id_to_show)

        if user_db_object:
            user_info_text += f"<b>Telegram:</b> @{user_db_object.username or 'N/A'}, {user_db_object.first_name or ''} {user_db_object.last_name or ''}\n"
            user_info_text += f"<b>–†–æ–ª—å:</b> {getattr(user_db_object.role, 'value', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')}\n"
            user_info_text += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_db_object.contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            user_info_text += f"<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {user_db_object.registration_date.strftime('%Y-%m-%d %H:%M') if user_db_object.registration_date else 'N/A'}\n"
            user_info_text += f"<b>–°—Ç–∞—Ç—É—Å –±–∞–Ω–∞:</b> {'üö´ –ó–∞–±–∞–Ω–µ–Ω' if user_db_object.is_banned else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n"

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ä–æ–ª—å, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if user_db_object.role == UserRole.APPLICANT:
                app_profile_q = await session.execute(select(ApplicantProfile).where(ApplicantProfile.user_id == user_id_to_show))
                app_profile_for_buttons = app_profile_q.scalar_one_or_none()
                if app_profile_for_buttons:
                    user_info_text += (
                        f"<b>--- –ê–Ω–∫–µ—Ç–∞ –°–æ–∏—Å–∫–∞—Ç–µ–ª—è (ID: {app_profile_for_buttons.id}) ---</b>\n"
                        f"–ì–æ—Ä–æ–¥: {app_profile_for_buttons.city}, –ü–æ–ª: {getattr(app_profile_for_buttons.gender, 'name', 'N/A').title()}\n"
                        f"–í–æ–∑—Ä–∞—Å—Ç: {app_profile_for_buttons.age}, –û–ø—ã—Ç: {app_profile_for_buttons.experience[:100]}...\n"
                        f"–ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if app_profile_for_buttons.is_active else '–ù–µ—Ç'}\n\n"
                    )
            elif user_db_object.role == UserRole.EMPLOYER:
                emp_profile_q = await session.execute(select(EmployerProfile).where(EmployerProfile.user_id == user_id_to_show))
                emp_profile_for_buttons = emp_profile_q.scalar_one_or_none()
                if emp_profile_for_buttons:
                    photo_status = "–ï—Å—Ç—å" if emp_profile_for_buttons.photo_file_id else "–ù–µ—Ç"
                    user_info_text += (
                        f"<b>--- –ê–Ω–∫–µ—Ç–∞ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è (ID: {emp_profile_for_buttons.id}) ---</b>\n"
                        f"–ö–æ–º–ø–∞–Ω–∏—è: {emp_profile_for_buttons.company_name}, –ì–æ—Ä–æ–¥: {emp_profile_for_buttons.city}\n"
                        f"–ü–æ–∑–∏—Ü–∏—è: {emp_profile_for_buttons.position}, –§–æ—Ç–æ: {photo_status}\n"
                        f"–ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if emp_profile_for_buttons.is_active else '–ù–µ—Ç'}\n"
                        f"–ü—É—Å—Ç—ã—à–∫–∞: {'–î–∞' if emp_profile_for_buttons.is_dummy else '–ù–µ—Ç'}\n\n"
                    )
        else:
            user_info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_show} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."

    # –§–æ—Ä–º–∏—Ä—É–µ–º Inline-–∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_buttons_list = [] # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    if user_db_object: # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏–º–µ—é—Ç —Å–º—ã—Å–ª, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user_db_object.is_banned:
            action_buttons_list.append([InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"{USER_DETAILS_CALLBACK_PREFIX}unban:{user_id_to_show}")])
        else:
            action_buttons_list.append([InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"{USER_DETAILS_CALLBACK_PREFIX}ban:{user_id_to_show}")])
        
        # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º user_id_to_show, —Ç.–∫. —Ö—ç–Ω–¥–ª–µ—Ä—ã —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ user_id)
        if app_profile_for_buttons: 
             action_buttons_list.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è", callback_data=f"{USER_DETAILS_CALLBACK_PREFIX}del_app_profile:{user_id_to_show}")])
        if emp_profile_for_buttons: 
             action_buttons_list.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è", callback_data=f"{USER_DETAILS_CALLBACK_PREFIX}del_emp_profile:{user_id_to_show}")])

    action_buttons_list.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data=f"{USER_DETAILS_CALLBACK_PREFIX}back_to_admin_main")])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ (—Ö–æ—Ç—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ user_exists)
    details_action_kb = InlineKeyboardMarkup(inline_keyboard=action_buttons_list) if action_buttons_list else None
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
    if user_db_object: # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        await state.set_state(AdminStates.viewing_user_details)
    else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await state.set_state(AdminStates.in_panel) # –∏–ª–∏ await state.clear() –∏ –∑–∞—Ç–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        details_action_kb = admin_main_menu_keyboard # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –∏ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
        user_info_text += "\n–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."


    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        if isinstance(target_message_or_cq, Message): # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /find
            await target_message_or_cq.answer(user_info_text, reply_markup=details_action_kb, parse_mode="HTML")
        elif isinstance(target_message_or_cq, CallbackQuery): # –ï—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ
            await target_message_or_cq.message.edit_text(user_info_text, reply_markup=details_action_kb, parse_mode="HTML")
            await target_message_or_cq.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    except Exception as e:
        print(f"Error sending/editing user details: {e}\n{traceback.format_exc()}")
        # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_to_act_on.answer(user_info_text, reply_markup=details_action_kb, parse_mode="HTML")
        if isinstance(target_message_or_cq, CallbackQuery):
            await target_message_or_cq.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")



# Callback "–ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é" –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.callback_query(F.data == f"{USER_DETAILS_CALLBACK_PREFIX}back_to_admin_main", StateFilter(AdminStates.viewing_user_details))
async def admin_back_to_main_from_user_details(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.in_panel)
    try: await callback_query.message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
    except: pass
    await callback_query.message.answer(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)
    await callback_query.answer()

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.callback_query(F.data.startswith(f"{USER_DETAILS_CALLBACK_PREFIX}ban:"), StateFilter(AdminStates.viewing_user_details))
async def admin_ban_user_action(callback_query: CallbackQuery, state: FSMContext):
    try:
        user_to_ban_id = int(callback_query.data.split(":")[-1])
    except (ValueError, IndexError):
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True); return

    async with AsyncSessionFactory() as session, session.begin():
        user_to_ban = await session.get(User, user_to_ban_id)
        if user_to_ban:
            if not user_to_ban.is_banned:
                user_to_ban.is_banned = True
                # session.add(user_to_ban) # SQLAlchemy –æ—Ç—Å–ª–µ–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                await session.commit() # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_to_ban_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
                print(f"DEBUG: Admin {callback_query.from_user.id} BANNED user {user_to_ban_id}")
            else:
                await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_to_ban_id} —É–∂–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        else:
            await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_to_ban_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –¥–µ—Ç–∞–ª–µ–π, —Ç–∞–∫ –∫–∞–∫ –∏—Ö –Ω–µ—Ç
            await state.set_state(AdminStates.in_panel)
            await callback_query.message.edit_text(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)
            return
            
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∞
    await show_found_user_details(callback_query, state, user_to_ban_id) # –ü–µ—Ä–µ–¥–∞–µ–º callback_query

# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.callback_query(F.data.startswith(f"{USER_DETAILS_CALLBACK_PREFIX}unban:"), StateFilter(AdminStates.viewing_user_details))
async def admin_unban_user_action(callback_query: CallbackQuery, state: FSMContext):
    try:
        user_to_unban_id = int(callback_query.data.split(":")[-1])
    except (ValueError, IndexError):
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True); return

    async with AsyncSessionFactory() as session, session.begin():
        user_to_unban = await session.get(User, user_to_unban_id)
        if user_to_unban:
            if user_to_unban.is_banned:
                user_to_unban.is_banned = False
                await session.commit()
                await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_to_unban_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
                print(f"DEBUG: Admin {callback_query.from_user.id} UNBANNED user {user_to_unban_id}")
            else:
                await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_to_unban_id} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        else:
            await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_to_unban_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            await state.set_state(AdminStates.in_panel)
            await callback_query.message.edit_text(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)
            return
            
    await show_found_user_details(callback_query, state, user_to_unban_id)

@admin_router.callback_query(F.data.startswith(f"{USER_DETAILS_CALLBACK_PREFIX}del_app_profile:"), StateFilter(AdminStates.viewing_user_details))
async def admin_delete_applicant_profile_action(callback_query: CallbackQuery, state: FSMContext):
    try:
        parts = callback_query.data.split(":")
        user_id_of_profile_owner = int(parts[1]) # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å—é –∞–Ω–∫–µ—Ç—É —É–¥–∞–ª—è–µ–º
        # profile_id = int(parts[2]) # ID —Å–∞–º–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ ApplicantProfile, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è delete (–ø–æ–∫–∞ —É–¥–∞–ª—è–µ–º –ø–æ user_id)
    except (ValueError, IndexError):
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True); return

    deleted = False
    async with AsyncSessionFactory() as session, session.begin():
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –ø–æ user_id
        result = await session.execute(
            delete(ApplicantProfile).where(ApplicantProfile.user_id == user_id_of_profile_owner)
        )
        if result.rowcount > 0:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–º
            user_obj = await session.get(User, user_id_of_profile_owner)
            if user_obj and user_obj.role == UserRole.APPLICANT:
                user_obj.role = None
            deleted = True
            print(f"DEBUG: Admin {callback_query.from_user.id} deleted ApplicantProfile for user {user_id_of_profile_owner}")
        await session.commit()

    if deleted:
        await callback_query.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–∞, —Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞.", show_alert=True)
    else:
        await callback_query.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
    
    await show_found_user_details(callback_query, state, user_id_of_profile_owner)


# –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
@admin_router.callback_query(F.data.startswith(f"{USER_DETAILS_CALLBACK_PREFIX}del_emp_profile:"), StateFilter(AdminStates.viewing_user_details))
async def admin_delete_employer_profile_action(callback_query: CallbackQuery, state: FSMContext):
    try:
        parts = callback_query.data.split(":")
        user_id_of_profile_owner = int(parts[1])
        # profile_id = int(parts[2]) # ID —Å–∞–º–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ EmployerProfile
    except (ValueError, IndexError):
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True); return
    
    deleted = False
    async with AsyncSessionFactory() as session, session.begin():
        result = await session.execute(
            delete(EmployerProfile).where(EmployerProfile.user_id == user_id_of_profile_owner)
        )
        if result.rowcount > 0:
            user_obj = await session.get(User, user_id_of_profile_owner)
            if user_obj and user_obj.role == UserRole.EMPLOYER:
                user_obj.role = None
            if user_obj: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                user_obj.active_notification_message_id = None # –û—à–∏–±–∫–∞: EmployerProfile.active_notification_message_id

            deleted = True
            print(f"DEBUG: Admin {callback_query.from_user.id} deleted EmployerProfile for user {user_id_of_profile_owner}")
        await session.commit()

    if deleted:
        await callback_query.answer("–ê–Ω–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–∞, —Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞.", show_alert=True)
    else:
        await callback_query.answer("–ê–Ω–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        
    await show_found_user_details(callback_query, state, user_id_of_profile_owner)


def get_manage_motivation_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_motivation_add")],
        [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_motivation_list")], # (TODO)
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_motivation_back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@admin_router.message(F.text == "üé¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º –ö–æ–Ω—Ç–µ–Ω—Ç–æ–º", StateFilter(AdminStates.in_panel))
async def admin_manage_motivation_menu(message: Message, state: FSMContext):
    # await state.set_state(AdminStates.managing_motivation_content) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–¥–º–µ–Ω—é
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π:",
        reply_markup=get_manage_motivation_keyboard()
    )
    # Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–µ —É–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ inline-–º–µ–Ω—é –ø–æ–≤–µ—Ä—Ö

# Callback "–ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é" –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
@admin_router.callback_query(F.data == "admin_motivation_back_to_main")
# @admin_router.callback_query(F.data == "admin_motivation_back_to_main", StateFilter(AdminStates.managing_motivation_content))
async def admin_back_to_main_from_motivation(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.in_panel) 
    try: 
        await callback_query.message.edit_text(ADMIN_GREETING, reply_markup=None) 
        await callback_query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=admin_main_menu_keyboard)
    except:
        await callback_query.message.answer(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)
    await callback_query.answer()




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥)
async def return_to_motivation_management_menu(message: Message, state: FSMContext, edit_previous: bool = False):
    await state.set_state(AdminStates.in_panel) # –ò–ª–∏ AdminStates.managing_motivation_content, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    kb = get_manage_motivation_keyboard()
    if edit_previous and message.is_bot: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        try:
            if message.photo or message.video: await message.delete() # –ù–µ–ª—å–∑—è —Ç–µ–∫—Å—Ç –Ω–∞ –º–µ–¥–∏–∞
            await message.edit_text(text, reply_markup=kb)
        except: # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(text, reply_markup=kb)
    else: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(text, reply_markup=kb)

# Callback –¥–ª—è "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
@admin_router.callback_query(F.data == "admin_motivation_add") 

async def admin_motivation_add_start(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.adding_motivation_type)
    try: # –£–±–∏—Ä–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
            reply_markup=None
        )
    except: # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
    
    await callback_query.message.answer("–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", reply_markup=motivation_type_keyboard)
    await callback_query.answer()

# –û—Ç–º–µ–Ω–∞ –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
@admin_router.message(StateFilter(
    AdminStates.adding_motivation_type,
    AdminStates.adding_motivation_file,
    AdminStates.adding_motivation_text_caption,
    AdminStates.adding_motivation_confirmation
), F.text == "–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
async def admin_cancel_motivation_add(message: Message, state: FSMContext):
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await return_to_motivation_management_menu(message, state, edit_previous=False)


# –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@admin_router.message(AdminStates.adding_motivation_type, F.text.in_({"–í–∏–¥–µ–æ", "–§–æ—Ç–æ", "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"}))
async def admin_motivation_process_type(message: Message, state: FSMContext):
    content_type_str = message.text
    selected_type = None
    if content_type_str == "–í–∏–¥–µ–æ": selected_type = MotivationalContentTypeEnum.VIDEO
    elif content_type_str == "–§–æ—Ç–æ": selected_type = MotivationalContentTypeEnum.PHOTO
    elif content_type_str == "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç": selected_type = MotivationalContentTypeEnum.TEXT_ONLY
    
    await state.update_data(motivation_content_type=selected_type)
    
    if selected_type == MotivationalContentTypeEnum.TEXT_ONLY:
        await state.set_state(AdminStates.adding_motivation_text_caption)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=cancel_field_edit_keyboard) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –ø–æ–ª—è
    else: # –í–∏–¥–µ–æ –∏–ª–∏ –§–æ—Ç–æ
        await state.set_state(AdminStates.adding_motivation_file)
        await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª ({content_type_str.lower()}):", reply_markup=cancel_field_edit_keyboard)

@admin_router.message(AdminStates.adding_motivation_type) # –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø
async def admin_motivation_invalid_type(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.", reply_markup=motivation_type_keyboard)


# –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–§–æ—Ç–æ –∏–ª–∏ –í–∏–¥–µ–æ)
@admin_router.message(AdminStates.adding_motivation_file, F.photo | F.video)
async def admin_motivation_process_file(message: Message, state: FSMContext):
    file_id = None
    if message.photo: file_id = message.photo[-1].file_id
    elif message.video: file_id = message.video.file_id
    
    await state.update_data(motivation_file_id=file_id)
    await state.set_state(AdminStates.adding_motivation_text_caption)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç/–ø–æ–¥–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –º–µ–¥–∏–∞:", reply_markup=cancel_field_edit_keyboard)

@admin_router.message(AdminStates.adding_motivation_file, ~ (F.photo | F.video)) # –ï—Å–ª–∏ –Ω–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã)
async def admin_motivation_invalid_file(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ": # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç –∏–∑ cancel_field_edit_keyboard
        # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ –∫ –æ—Ç–º–µ–Ω–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        return await admin_cancel_motivation_add(message, state)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=cancel_field_edit_keyboard)

# –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞/–ø–æ–¥–ø–∏—Å–∏
@admin_router.message(AdminStates.adding_motivation_text_caption, F.text)
async def admin_motivation_process_text_caption(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ": 
        return await admin_cancel_motivation_add(message, state) # –û—Ç–º–µ–Ω–∞ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        
    text_caption = message.text.strip()
    if not (5 <= len(text_caption) <= 1000): # –í–∞–ª–∏–¥–∞—Ü–∏—è
        await message.answer("–¢–µ–∫—Å—Ç/–ø–æ–¥–ø–∏—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=cancel_field_edit_keyboard)
        return
    
    await state.update_data(motivation_text_caption=text_caption)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    data = await state.get_data()
    confirmation_text = f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>\n"
    content_type_enum: MotivationalContentTypeEnum = data.get('motivation_content_type')
    confirmation_text += f"–¢–∏–ø: {content_type_enum.name.replace('_', ' ').title()}\n"
    if data.get('motivation_file_id'):
        confirmation_text += f"File ID: <code>{data.get('motivation_file_id')}</code> (–º–µ–¥–∏–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏)\n"
    confirmation_text += f"–¢–µ–∫—Å—Ç/–ü–æ–¥–ø–∏—Å—å:\n<em>{data.get('motivation_text_caption')}</em>\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?"

    confirm_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")],
        [KeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")] # –í—ã–∑–æ–≤–µ—Ç admin_cancel_motivation_add
    ], resize_keyboard=True, one_time_keyboard=True)
    
    await state.set_state(AdminStates.adding_motivation_confirmation)
    await message.answer(confirmation_text, reply_markup=confirm_kb, parse_mode="HTML")

# –®–∞–≥ 4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@admin_router.message(AdminStates.adding_motivation_confirmation, F.text == "‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
async def admin_motivation_save(message: Message, state: FSMContext):
    data = await state.get_data()
    
    async with AsyncSessionFactory() as session, session.begin():
        new_content = MotivationalContent(
            content_type=data.get('motivation_content_type'),
            file_id=data.get('motivation_file_id'), # –ë—É–¥–µ—Ç None –¥–ª—è TEXT_ONLY
            text_caption=data.get('motivation_text_caption'),
            is_active=True # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–µ–Ω
        )
        session.add(new_content)
    
    await message.answer("–ù–æ–≤—ã–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove())
    await return_to_motivation_management_menu(message, state, edit_previous=False)



# –ò—Å–ø–æ–ª—å–∑—É–µ–º StateFilter(AdminStates) –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ", —á—Ç–æ–±—ã –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –≤–æ –≤—Å–µ—Ö —à–∞–≥–∞—Ö
@admin_router.message(StateFilter(
    AdminStates.editing_antispam_dummy_text, 
    AdminStates.editing_antispam_dummy_photo,
    AdminStates.adding_motivation_type, # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    AdminStates.adding_motivation_file,
    AdminStates.adding_motivation_text_caption
), F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ") # –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–µ cancel_field_edit_keyboard
async def admin_cancel_current_field_edit_by_button(message: Message, state: FSMContext):
    current_fsm_state_str = await state.get_state()
    await message.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    
    if current_fsm_state_str in [AdminStates.editing_antispam_dummy_text.state, AdminStates.editing_antispam_dummy_photo.state]:
        await state.set_state(AdminStates.in_panel) 
        await show_antispam_dummy_config_menu(message, state)
    elif current_fsm_state_str in [AdminStates.adding_motivation_type.state, AdminStates.adding_motivation_file.state, AdminStates.adding_motivation_text_caption.state]:
        # –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–≤–æ–¥–∞ –ø–æ–ª—è –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π
        await return_to_motivation_management_menu(message, state, edit_previous=False)
    else: 
        await state.set_state(AdminStates.in_panel)
        await message.answer(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def build_motivation_list_keyboard(
    contents: list[MotivationalContent], 
    current_page: int = 0, 
    per_page: int = 5 # –£—Å—Ç–∞–Ω–æ–≤–∏–º 5 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –¥–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞ 3
) -> InlineKeyboardMarkup:
    buttons = []
    
    total_items = len(contents)
    if total_items == 0: # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—É—Å—Ç
        buttons.append([InlineKeyboardButton(text="–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π?", callback_data="admin_motivation_add")])
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ (–≤ –º–µ–Ω—é –º–æ—Ç–∏–≤–∞—Ü–∏–∏)", callback_data="admin_motivation_back_to_manage_menu")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –æ–∫—Ä—É–≥–ª—è—è –≤–≤–µ—Ä—Ö
    total_pages = (total_items + per_page - 1) // per_page
    if total_pages == 0: total_pages = 1 # –ú–∏–Ω–∏–º—É–º 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º current_page, –µ—Å–ª–∏ –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    current_page = max(0, min(current_page, total_pages - 1))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = current_page * per_page
    end_index = start_index + per_page
    paginated_contents = contents[start_index:end_index]

    for content_item in paginated_contents:
        item_text_preview = content_item.text_caption[:25].strip() + "..." if len(content_item.text_caption) > 25 else content_item.text_caption.strip()
        status_emoji = "üü¢" if content_item.is_active else "üî¥"
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        type_emoji = "‚ùì" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if content_item.content_type == MotivationalContentTypeEnum.VIDEO:
            type_emoji = "üé¨"
        elif content_item.content_type == MotivationalContentTypeEnum.PHOTO:
            type_emoji = "üñºÔ∏è"
        elif content_item.content_type == MotivationalContentTypeEnum.TEXT_ONLY:
            type_emoji = "üìÑ"
        
    
        buttons.append([
            InlineKeyboardButton(
                text=f"{status_emoji}{type_emoji} ID:{content_item.id} - {item_text_preview}",
                callback_data=f"{MOTIVATION_CALLBACK_PREFIX}view:{content_item.id}:{current_page}" 
            )
        ])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        action_row_for_item = [
            InlineKeyboardButton(text="üëÅÔ∏è–ü–æ–∫–∞–∑", callback_data=f"{MOTIVATION_CALLBACK_PREFIX}view:{content_item.id}:{current_page}"),
            InlineKeyboardButton(
                text="üóëÔ∏è–£–¥–∞–ª.", 
                callback_data=f"{MOTIVATION_CALLBACK_PREFIX}delete_confirm:{content_item.id}:{current_page}"
            ),
            InlineKeyboardButton(
                text="‚ö°–ê–∫—Ç." if not content_item.is_active else "üí§–ù–µ–∞–∫—Ç.", 
                callback_data=f"{MOTIVATION_CALLBACK_PREFIX}toggle_active:{content_item.id}:{current_page}"
            )
        ]
        buttons.append(action_row_for_item)
        # buttons.append([InlineKeyboardButton(text="-"*20, callback_data="no_action_separator")]) # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []
    if current_page > 0: # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥.", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        pagination_row.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"{MOTIVATION_CALLBACK_PREFIX}page:{current_page-1}"))
    
    if total_pages > 1: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        pagination_row.append(InlineKeyboardButton(text=f"üìÑ {current_page+1}/{total_pages}", callback_data="no_action_page_num")) # –ù–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (current_page + 1) < total_pages:
        pagination_row.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"{MOTIVATION_CALLBACK_PREFIX}page:{current_page+1}"))
    
    if pagination_row: # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        buttons.append(pagination_row)
            
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ (–≤ –º–µ–Ω—é –º–æ—Ç–∏–≤–∞—Ü–∏–∏)", callback_data="admin_motivation_back_to_manage_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def show_motivation_content_list_page(target: Message | CallbackQuery, state: FSMContext, page: int = 0):
    message_to_act_on = target.message if isinstance(target, CallbackQuery) else target
    per_page = 3 # –ò–ª–∏ –≤–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    async with AsyncSessionFactory() as session, session.begin():
        content_result = await session.execute(
            select(MotivationalContent).order_by(MotivationalContent.id.desc()) # –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
        )
        all_content_items = content_result.scalars().all()

    if not all_content_items:
        text_to_send = "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω."
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é (–≥–¥–µ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å", "–°–ø–∏—Å–æ–∫", "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
        kb_to_send = get_manage_motivation_keyboard() 
    else:
        text_to_send = f"–°–ø–∏—Å–æ–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–°—Ç—Ä. {page+1}):\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π."
        kb_to_send = await build_motivation_list_keyboard(all_content_items, current_page=page, per_page=per_page)
    
    try:
        if isinstance(target, CallbackQuery):
            await message_to_act_on.edit_text(text_to_send, reply_markup=kb_to_send)
            await target.answer()
        else: # Message
            await message_to_act_on.answer(text_to_send, reply_markup=kb_to_send)
    except Exception as e:
        print(f"Error displaying motivation content list page {page}: {e}")
        # –§–æ–ª–ª–±—ç–∫, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        await message_to_act_on.answer(text_to_send, reply_markup=kb_to_send)
        if isinstance(target, CallbackQuery): await target.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫.")


# –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
@admin_router.callback_query(F.data == "admin_motivation_list")
# –î–æ–±–∞–≤—å—Ç–µ StateFilter, –µ—Å–ª–∏ managing_motivation_content –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: StateFilter(AdminStates.managing_motivation_content)
async def admin_list_motivation_content_start(callback_query: CallbackQuery, state: FSMContext):
    await show_motivation_content_list_page(callback_query, state, page=0) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@admin_router.callback_query(F.data.startswith(f"{MOTIVATION_CALLBACK_PREFIX}page:"))
async def admin_paginate_motivation_list(callback_query: CallbackQuery, state: FSMContext):
    try:
        page = int(callback_query.data.split(":")[-1])
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True); return
    await show_motivation_content_list_page(callback_query, state, page=page)

# Callback "üîô –ù–∞–∑–∞–¥ (–≤ –º–µ–Ω—é –º–æ—Ç–∏–≤–∞—Ü–∏–∏)" –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@admin_router.callback_query(F.data == "admin_motivation_back_to_manage_menu")
async def admin_motivation_list_back_to_menu(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_manage_motivation_keyboard() # get_manage_motivation_keyboard –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    )
    await callback_query.answer()
    
    
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ("üëÅÔ∏è–ü–æ–∫–∞–∑")
@admin_router.callback_query(F.data.startswith(f"{MOTIVATION_CALLBACK_PREFIX}view:"))
async def admin_motivation_view_specific_item(callback_query: CallbackQuery, state: FSMContext):
    try:
        parts = callback_query.data.split(":")
        item_id = int(parts[1])
        page_to_return_to = int(parts[2]) # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤–µ—Ä–Ω—É—Ç—å—Å—è
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", show_alert=True)
        return

    async with AsyncSessionFactory() as session, session.begin():
        content_item = await session.get(MotivationalContent, item_id)

    if not content_item:
        await callback_query.answer("–≠–ª–µ–º–µ–Ω—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        # –ú–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω
        await show_motivation_content_list_page(callback_query, state, page=page_to_return_to)
        return

    await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    back_to_list_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É (—Å—Ç—Ä. {page_to_return_to + 1})", 
            callback_data=f"{MOTIVATION_CALLBACK_PREFIX}page:{page_to_return_to}" # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        )]
    ])

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    try:
        await callback_query.message.delete()
    except Exception as e_del:
        print(f"DEBUG: Could not delete message before viewing motivation item: {e_del}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    bot_instance: Bot = callback_query.bot # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ callback_query
    try:
        if content_item.content_type == MotivationalContentTypeEnum.VIDEO and content_item.file_id:
            await bot_instance.send_video(
                chat_id=callback_query.from_user.id,
                video=content_item.file_id,
                caption=content_item.text_caption[:1024], # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ caption
                reply_markup=back_to_list_kb,
                parse_mode="HTML" # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ HTML –≤ text_caption
            )
        elif content_item.content_type == MotivationalContentTypeEnum.PHOTO and content_item.file_id:
            await bot_instance.send_photo(
                chat_id=callback_query.from_user.id,
                photo=content_item.file_id,
                caption=content_item.text_caption[:1024], # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ caption
                reply_markup=back_to_list_kb,
                parse_mode="HTML"
            )
        elif content_item.content_type == MotivationalContentTypeEnum.TEXT_ONLY:
            await bot_instance.send_message(
                chat_id=callback_query.from_user.id,
                text=f"<b>–¢–µ–∫—Å—Ç–æ–≤–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: {content_item.id}):</b>\n\n{content_item.text_caption}",
                reply_markup=back_to_list_kb,
                parse_mode="HTML"
            )
        else: # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–ª–∏ –Ω–µ—Ç file_id –¥–ª—è –º–µ–¥–∏–∞
            await bot_instance.send_message(
                chat_id=callback_query.from_user.id,
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç ID {content_item.id}.\n–¢–∏–ø: {content_item.content_type.name}\n–¢–µ–∫—Å—Ç: {content_item.text_caption}",
                reply_markup=back_to_list_kb
            )
    except Exception as e_send:
        print(f"ERROR sending motivational content item ID {content_item.id}: {e_send}\n{traceback.format_exc()}")
        await callback_query.message.answer( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç, –≥–¥–µ –±—ã–ª–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.",
            reply_markup=back_to_list_kb
        )


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üóëÔ∏è–£–¥–∞–ª." (–∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
@admin_router.callback_query(F.data.startswith(f"{MOTIVATION_CALLBACK_PREFIX}delete_confirm:"))
async def admin_motivation_confirm_delete_item(callback_query: CallbackQuery, state: FSMContext):
    try:
        parts = callback_query.data.split(":")
        item_id = int(parts[1])
        page_to_return_to = int(parts[2])
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True); return

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"{MOTIVATION_CALLBACK_PREFIX}delete_do:{item_id}:{page_to_return_to}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"{MOTIVATION_CALLBACK_PREFIX}delete_cancel:{item_id}:{page_to_return_to}")
        ]
    ])
    await callback_query.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç ID {item_id}?",
        reply_markup=confirm_kb
    )
    await callback_query.answer()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞" (–æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è)
@admin_router.callback_query(F.data.startswith(f"{MOTIVATION_CALLBACK_PREFIX}delete_cancel:"))
async def admin_motivation_cancel_delete_item(callback_query: CallbackQuery, state: FSMContext):
    try:
        page_to_return_to = int(callback_query.data.split(":")[-1]) # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    except (IndexError, ValueError):
        page_to_return_to = 0 # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        
    await callback_query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    await show_motivation_content_list_page(callback_query, state, page=page_to_return_to)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å" (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
@admin_router.callback_query(F.data.startswith(f"{MOTIVATION_CALLBACK_PREFIX}delete_do:"))
async def admin_motivation_do_delete_item(callback_query: CallbackQuery, state: FSMContext):
    try:
        parts = callback_query.data.split(":")
        item_id = int(parts[1])
        page_to_return_to = int(parts[2])
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True); return

    deleted_count = 0
    async with AsyncSessionFactory() as session, session.begin():
        result = await session.execute(
            delete(MotivationalContent).where(MotivationalContent.id == item_id)
        )
        deleted_count = result.rowcount 
    
    if deleted_count > 0:
        await callback_query.answer(f"–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç ID {item_id} —É–¥–∞–ª–µ–Ω.", show_alert=True)
    else:
        await callback_query.answer(f"–ö–æ–Ω—Ç–µ–Ω—Ç ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –Ω–∞ —Ç—É –∂–µ (–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π) —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_motivation_content_list_page(callback_query, state, page=page_to_return_to)

@admin_router.callback_query(F.data.startswith(f"{MOTIVATION_CALLBACK_PREFIX}toggle_active:"))
async def admin_motivation_toggle_active_status(callback_query: CallbackQuery, state: FSMContext):
    try:
        parts = callback_query.data.split(":")
        item_id = int(parts[1])
        page_to_return_to = int(parts[2])
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞.", show_alert=True); return

    new_status_is_active = None
    async with AsyncSessionFactory() as session, session.begin():
        content_item = await session.get(MotivationalContent, item_id)
        if content_item:
            content_item.is_active = not content_item.is_active # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
            content_item.updated_at = func.now()
            # session.add(content_item) # –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, SQLAlchemy –æ—Ç—Å–ª–µ–¥–∏—Ç
            new_status_is_active = content_item.is_active
            await session.commit() # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        else:
            await callback_query.answer(f"–ö–æ–Ω—Ç–µ–Ω—Ç ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return # –í—ã—Ö–æ–¥–∏–º, —Å–ø–∏—Å–æ–∫ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, —Ç.–∫. —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç

    if new_status_is_active is not None:
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status_is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        await callback_query.answer(f"–ö–æ–Ω—Ç–µ–Ω—Ç ID {item_id} {status_text}.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_motivation_content_list_page(callback_query, state, page=page_to_return_to)


# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è "no_action_separator" –∏ "no_action_page_num"
@admin_router.callback_query(F.data.in_({"no_action_separator", "no_action_page_num"}))
async def no_action_pagination_info(callback_query: CallbackQuery):
    await callback_query.answer() # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

# --- –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –î–ï–ô–°–¢–í–ò–ô –° –ö–û–ù–ö–†–ï–¢–ù–´–ú –ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–´–ú –ö–û–ù–¢–ï–ù–¢–û–ú ---
@admin_router.callback_query(F.data.startswith(f"{MOTIVATION_CALLBACK_PREFIX}view:"))
async def admin_motivation_view_item(callback_query: CallbackQuery, state: FSMContext):
    parts = callback_query.data.split(":")
    item_id = int(parts[1])
    await callback_query.answer(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ID {item_id} (TODO)", show_alert=True)

@admin_router.callback_query(F.data.startswith(f"{MOTIVATION_CALLBACK_PREFIX}delete_confirm:"))
async def admin_motivation_delete_item_confirm(callback_query: CallbackQuery, state: FSMContext):
    parts = callback_query.data.split(":")
    item_id = int(parts[1])
    await callback_query.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ID {item_id} (TODO)", show_alert=True)

@admin_router.callback_query(F.data.startswith(f"{MOTIVATION_CALLBACK_PREFIX}toggle_active:"))
async def admin_motivation_toggle_active_item(callback_query: CallbackQuery, state: FSMContext):
    parts = callback_query.data.split(":")
    item_id = int(parts[1])
    await callback_query.answer(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ID {item_id} (TODO)", show_alert=True)
    
    
# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ê–§–ò–ö–û–ú –ò –†–ï–§–ï–†–ê–õ–¨–ù–´–ú–ò –°–°–´–õ–ö–ê–ú–ò ---

def get_referral_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–æ–º."""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É", callback_data=f"{REFERRAL_CALLBACK_PREFIX}create_start")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º", callback_data=f"{REFERRAL_CALLBACK_PREFIX}stats_page:0")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data=f"{REFERRAL_CALLBACK_PREFIX}back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–æ–º"
@admin_router.message(F.text == "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–æ–º", StateFilter(AdminStates.in_panel))
async def admin_manage_referrals_menu(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏:",
        reply_markup=get_referral_management_keyboard()
    )
    
@admin_router.message(StateFilter(AdminReferralManagement.waiting_for_name), Command("cancel-admin-action"))
async def admin_referral_create_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=get_referral_management_keyboard())

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–æ–º
@admin_router.callback_query(F.data == f"{REFERRAL_CALLBACK_PREFIX}back_to_main")
async def admin_referral_back_to_main(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.in_panel)
    try:
        await callback_query.message.edit_text(ADMIN_GREETING, reply_markup=None)
        await callback_query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=admin_main_menu_keyboard)
    except:
        await callback_query.message.answer(ADMIN_GREETING, reply_markup=admin_main_menu_keyboard)
    await callback_query.answer()
    
# --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (FSM) ---

@admin_router.callback_query(F.data == f"{REFERRAL_CALLBACK_PREFIX}create_start")
async def admin_referral_create_start(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminReferralManagement.waiting_for_name)
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `–†–µ–∫–ª–∞–º–∞ –≤ –∫–∞–Ω–∞–ª–µ @partner_channel`\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel-admin-action",
        parse_mode="Markdown"
    )
    await callback_query.answer()



@admin_router.message(StateFilter(AdminReferralManagement.waiting_for_name), F.text)
async def admin_referral_create_process_name(message: Message, state: FSMContext, bot: Bot):
    link_name = message.text.strip()
    if not (3 <= len(link_name) <= 200):
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."); return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å—Å—ã–ª–∫–∏
    ref_code = secrets.token_urlsafe(8)

    async with AsyncSessionFactory() as session, session.begin():
        
        while True:
            exists = await session.execute(select(ReferralLink).where(ReferralLink.code == ref_code))
            if not exists.scalar_one_or_none():
                break
            ref_code = secrets.token_urlsafe(8)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ –ë–î
        new_link = ReferralLink(
            code=ref_code,
            name=link_name,
            creator_admin_id=message.from_user.id
        )
        session.add(new_link)
        await session.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å new_link.id

    bot_info = await bot.get_me()
    bot_username = bot_info.username
    final_link = f"https://t.me/{bot_username}?start={ref_code}"

    await state.clear()
    await message.answer(
        f"‚úÖ –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {link_name}\n"
        f"<b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b>\n"
        f"<code>{final_link}</code>\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–µ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.",
        parse_mode="HTML",
        reply_markup=get_referral_management_keyboard()
    )

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º ---

async def build_referral_stats_keyboard(links_with_stats: list, current_page: int, per_page: int, total_items: int) -> InlineKeyboardMarkup:
    buttons = []
    total_pages = (total_items + per_page - 1) // per_page
    
    for link_stat in links_with_stats:
        buttons.append([
            InlineKeyboardButton(
                text=f"'{link_stat.name[:25]}' ({link_stat.total_clicks} / {link_stat.unique_users} —É–Ω–∏–∫.)",
                callback_data=f"{REFERRAL_CALLBACK_PREFIX}details:{link_stat.id}" # TODO: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            )
        ])

    pagination_row = []
    if current_page > 0:
        pagination_row.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"{REFERRAL_CALLBACK_PREFIX}stats_page:{current_page-1}"))
    if total_pages > 1:
        pagination_row.append(InlineKeyboardButton(text=f"üìÑ {current_page+1}/{total_pages}", callback_data="no_action"))
    if (current_page + 1) < total_pages:
        pagination_row.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"{REFERRAL_CALLBACK_PREFIX}stats_page:{current_page+1}"))
    
    if pagination_row:
        buttons.append(pagination_row)

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"{REFERRAL_CALLBACK_PREFIX}back_to_menu_from_stats")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@admin_router.callback_query(F.data.startswith(f"{REFERRAL_CALLBACK_PREFIX}stats_page:"))
async def admin_referral_show_stats(callback_query: CallbackQuery, state: FSMContext):
    try:
        page = int(callback_query.data.split(":")[-1])
    except (ValueError, IndexError):
        page = 0
    
    per_page = 5

    async with AsyncSessionFactory() as session:

        total_items_res = await session.execute(select(func.count(ReferralLink.id)))
        total_items = total_items_res.scalar_one()

        if total_items == 0:
            await callback_query.message.edit_text(
                "–ï—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!",
                reply_markup=get_referral_management_keyboard()
            )
            await callback_query.answer()
            return

        # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        stmt = (
            select(
                ReferralLink.id,
                ReferralLink.name,
                ReferralLink.code,
                func.count(ReferralUsage.id).label('total_clicks'),
                func.count(func.distinct(ReferralUsage.user_id)).label('unique_users')
            )
            .outerjoin(ReferralUsage, ReferralLink.id == ReferralUsage.link_id)
            .group_by(ReferralLink.id)
            .order_by(ReferralLink.created_at.desc())
            .offset(page * per_page)
            .limit(per_page)
        )
        result = await session.execute(stmt)
        links_with_stats = result.all()

    text = "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º</b>\n(–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤ / –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n\n"
    for link in links_with_stats:
        text += f"‚ñ™Ô∏è <b>{link.name}</b>\n"
        text += f"   - <code>{link.code}</code>\n"
        text += f"   - –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: <b>{link.total_clicks}</b> (<b>{link.unique_users}</b> —É–Ω–∏–∫.)\n"

    keyboard = await build_referral_stats_keyboard(links_with_stats, page, per_page, total_items)
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback_query.answer()

# –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–æ–º
@admin_router.callback_query(F.data == f"{REFERRAL_CALLBACK_PREFIX}back_to_menu_from_stats")
async def admin_referral_stats_back_to_menu(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏:",
        reply_markup=get_referral_management_keyboard()
    )
    await callback_query.answer()