# app/middlewares/access_middleware.py
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware, Bot
from aiogram.types import Update, Message, CallbackQuery # –î–æ–±–∞–≤–∏–ª Bot

from app.db.database import AsyncSessionFactory
from app.db.models import User
from sqlalchemy import select
import traceback # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫

class BanCheckMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update, 
        data: Dict[str, Any] # data['bot'] –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Bot
    ) -> Awaitable[Any]:
        
        user_id = None
        chat_id_to_reply = None # –ú–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –Ω–µ —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, inline query)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤ Update
        if event.message and event.message.from_user:
            user_id = event.message.from_user.id
            chat_id_to_reply = event.message.chat.id
            print(f"DEBUG BanCheck: Event is Message from user_id: {user_id} in chat_id: {chat_id_to_reply}")
        elif event.callback_query and event.callback_query.from_user:
            user_id = event.callback_query.from_user.id
            if event.callback_query.message: # –£ CallbackQuery –º–æ–∂–µ—Ç –±—ã—Ç—å message
                 chat_id_to_reply = event.callback_query.message.chat.id
            print(f"DEBUG BanCheck: Event is CallbackQuery from user_id: {user_id}, reply_chat_id: {chat_id_to_reply}")
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ elif –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ event, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã –¥–ª—è –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, inline_query)
        
        # –ï—Å–ª–∏ user_id –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if not user_id:
            print("DEBUG BanCheck: user_id could not be determined from the event. Proceeding without ban check.")
            return await handler(event, data)

        print(f"DEBUG BanCheck: Checking ban status for user_id: {user_id}")
        is_banned_in_db = False
        try:
            async with AsyncSessionFactory() as session, session.begin():
                db_flag_result = await session.execute(
                    select(User.is_banned).where(User.telegram_id == user_id)
                )
                db_flag = db_flag_result.scalar_one_or_none()
                
                print(f"DEBUG BanCheck: DB is_banned_flag for {user_id}: {db_flag} (type: {type(db_flag)})")
                
                if db_flag is True: # –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É–ª–µ–≤–æ True
                    is_banned_in_db = True
        except Exception as e_db:
            print(f"ERROR BanCheck: DB error checking ban status for {user_id}: {e_db}\n{traceback.format_exc()}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î, —Ä–µ—à–∞–µ–º, –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å. 
            # –ë–µ–∑–æ–ø–∞—Å–Ω–µ–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å –ë–î.
            print(f"DEBUG BanCheck: Proceeding user {user_id} due to DB error during ban check.")
            return await handler(event, data)
        
        if is_banned_in_db:
            print(f"DEBUG BanCheck: User {user_id} IS BANNED. Denying access.")
            if chat_id_to_reply and 'bot' in data: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ bot –µ—Å—Ç—å –≤ data
                try:
                    bot_instance: Bot = data['bot'] # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Bot
                    await bot_instance.send_message(
                        chat_id=chat_id_to_reply,
                        text="üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
                    )
                except Exception as e_send:
                    print(f"DEBUG BanCheck: Error sending ban message to chat {chat_id_to_reply} for user {user_id}: {e_send}")
            
            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–ø–¥–µ–π—Ç–∞, –Ω–µ –≤—ã–∑—ã–≤–∞—è —Å–ª–µ–¥—É—é—â–∏–π handler
            return # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫—É middleware –∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
        else:
            print(f"DEBUG BanCheck: User {user_id} is NOT banned. Proceeding with handler.")
            return await handler(event, data)